// Class Definition for Evaluation

#include "Position.h"

class Evaluator{
    public:
        Position* pos;

        Score midScore[2];

        //endgame, gamephase, phases

        // PSQT

        std::array<Score, 6> material = {0, 900, 500, 350, 300, 100};

        Table<Score, 6, 64> midpsqt = 
        {{{-1, -1, 1, 7, 1, 2, 3, 5, 
        3, -3, 0, -1, -4, -6, -3, -4, 
        -7, 6, 3, 0, -3, 5, 4, 1, 
        -7, 6, 4, -7, -4, -8, 6, -4, 
        -3, -3, 4, -5, 7, -2, 3, 7, 
        4, 0, 6, -7, -3, 5, 1, 2, 
        1, 5, 1, -2, 4, -1, -5, -1, 
        -7, -5, 3, 7, 4, 2, -2, 6}, 

        {-5, -14, -9, -13, 11, -18, -7, -13, 
        8, -14, -2, -18, -2, -7, 14, 15, 
        9, -17, -3, 1, 16, 12, 12, 10, 
        -15, -13, 13, 4, 2, 8, -14, -1, 
        -10, 8, 12, -8, 16, 4, 1, 5, 
        6, -15, -18, -10, -13, 14, 2, 0, 
        -2, -13, 6, -4, -18, 8, -12, -1, 
        -6, -3, 14, 15, -4, 8, -17, -8}, 

        {-5, 7, 3, -8, 5, 1, 1, 3, 
        -10, -9, 6, 3, 4, 3, -7, -9, 
        5, 3, 2, -9, -8, -6, 7, 7, 
        5, 4, -4, -8, 8, 8, 9, 3, 
        6, 7, 2, -1, -3, -2, -2, 5, 
        -3, -6, 4, 9, 4, -5, -7, -8, 
        -9, -1, -2, -8, 9, 1, -6, -4, 
        -4, -6, 7, 5, -7, -2, 6, 0}, 

        {2, -5, 2, -7, 6, 4, -7, -1, 
        0, 1, 5, 4, 4, -1, -5, -2, 
        5, -7, 5, 1, -3, 2, -7, -3, 
        2, -1, -6, -5, -1, -1, 6, -3, 
        1, 5, -7, -1, 6, -2, -3, 4, 
        -5, 5, -3, -4, 5, -4, -4, 0, 
        -6, -6, -4, -6, 5, -4, 0, -7, 
        6, 3, 5, -4, 4, -6, 2, 0}, 

        {5, -6, 4, 0, 4, 2, -5, -4, 
        3, -1, 3, 3, -4, -1, -5, -3, 
        5, -1, -3, 4, 2, -2, 5, 4, 
        4, -3, -1, 5, 3, 2, -4, 5, 
        -1, -1, -5, 5, -2, -3, -5, 1, 
        -3, 0, 5, -4, -2, 4, 4, -3, 
        -3, 4, 5, 1, -3, 2, 4, -4, 
        1, -4, -6, -3, -6, -6, 1, 5}, 

        {0, 0, 0, 0, 0, 0, 0, 0,
        0, -1, 0, 1, 1, 1, -1, -1, 
        0, -2, -1, 0, 0, 0, 0, 0, 
        -1, -2, -1, -2, -1, 1, 0, -2, 
        -1, 1, -2, -2, -2, -2, 1, -1, 
        -1, 1, 0, 0, -2, 0, 0, -1, 
        1, 1, 1, -2, -1, -1, -1, -1, 
        0, 0, 0, 0, 0, 0, 0, 0}}};

        
        Evaluator();

        void assign(Position* pp){ pos = pp; }

        Score get();
        Score refresh();

        void makeMove(const Move& m); //no lazy updates
        void unmakeMove(); 

};