/*
Very Base Class for the Wilted Chess Engine
Class Definition of Bitboards

TheTilted096 12-18-24

Contains board representation and elementary makeMove

*/

#include <cassert>
#include <chrono>
#include <cstdint>
#include <cmath>
#include <fstream>
#include <immintrin.h>
#include <iostream>
#include <random>
#include <sstream>
#include <string>

typedef uint64_t Bitboard;

class Bitboards{
    public:
        //Pawn Lookup Table
        
        //King and Knight Lookup Table
        static constexpr Bitboard KingAttacks[64] = 
        {0x302ULL, 0x705ULL, 0xE0AULL, 0x1C14ULL, 0x3828ULL, 0x7050ULL, 0xE0A0ULL, 0xC040ULL, 
        0x30203ULL, 0x70507ULL, 0xE0A0EULL, 0x1C141CULL, 0x382838ULL, 0x705070ULL, 0xE0A0E0ULL, 0xC040C0ULL, 
        0x3020300ULL, 0x7050700ULL, 0xE0A0E00ULL, 0x1C141C00ULL, 0x38283800ULL, 0x70507000ULL, 0xE0A0E000ULL, 0xC040C000ULL, 
        0x302030000ULL, 0x705070000ULL, 0xE0A0E0000ULL, 0x1C141C0000ULL, 0x3828380000ULL, 0x7050700000ULL, 0xE0A0E00000ULL, 0xC040C00000ULL, 
        0x30203000000ULL, 0x70507000000ULL, 0xE0A0E000000ULL, 0x1C141C000000ULL, 0x382838000000ULL, 0x705070000000ULL, 0xE0A0E0000000ULL, 0xC040C0000000ULL, 
        0x3020300000000ULL, 0x7050700000000ULL, 0xE0A0E00000000ULL, 0x1C141C00000000ULL, 0x38283800000000ULL, 0x70507000000000ULL, 0xE0A0E000000000ULL, 0xC040C000000000ULL, 
        0x302030000000000ULL, 0x705070000000000ULL, 0xE0A0E0000000000ULL, 0x1C141C0000000000ULL, 0x3828380000000000ULL, 0x7050700000000000ULL, 0xE0A0E00000000000ULL, 0xC040C00000000000ULL, 
        0x203000000000000ULL, 0x507000000000000ULL, 0xA0E000000000000ULL, 0x141C000000000000ULL, 0x2838000000000000ULL, 0x5070000000000000ULL, 0xA0E0000000000000ULL, 0x40C0000000000000ULL};

        static constexpr Bitboard KnightAttacks[64] = 
        {0x20400ULL, 0x50800ULL, 0xA1100ULL, 0x142200ULL, 0x284400ULL, 0x508800ULL, 0xA01000ULL, 0x402000ULL, 
        0x2040004ULL, 0x5080008ULL, 0xA110011ULL, 0x14220022ULL, 0x28440044ULL, 0x50880088ULL, 0xA0100010ULL, 0x40200020ULL, 
        0x204000402ULL, 0x508000805ULL, 0xA1100110AULL, 0x1422002214ULL, 0x2844004428ULL, 0x5088008850ULL, 0xA0100010A0ULL, 0x4020002040ULL, 
        0x20400040200ULL, 0x50800080500ULL, 0xA1100110A00ULL, 0x142200221400ULL, 0x284400442800ULL, 0x508800885000ULL, 0xA0100010A000ULL, 0x402000204000ULL, 
        0x2040004020000ULL, 0x5080008050000ULL, 0xA1100110A0000ULL, 0x14220022140000ULL, 0x28440044280000ULL, 0x50880088500000ULL, 0xA0100010A00000ULL, 0x40200020400000ULL, 
        0x204000402000000ULL, 0x508000805000000ULL, 0xA1100110A000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL, 0x5088008850000000ULL, 0xA0100010A0000000ULL, 0x4020002040000000ULL, 
        0x400040200000000ULL, 0x800080500000000ULL, 0x1100110A00000000ULL, 0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL, 0x100010A000000000ULL, 0x2000204000000000ULL, 
        0x4020000000000ULL, 0x8050000000000ULL, 0x110A0000000000ULL, 0x22140000000000ULL, 0x44280000000000ULL, 0x88500000000000ULL, 0x10A00000000000ULL, 0x20400000000000ULL};
        
        static constexpr Bitboard plt[2][64] =
        {{0x200ULL, 0x500ULL, 0xA00ULL, 0x1400ULL, 0x2800ULL, 0x5000ULL, 0xA000ULL, 0x4000ULL, 
        0x20000ULL, 0x50000ULL, 0xA0000ULL, 0x140000ULL, 0x280000ULL, 0x500000ULL, 0xA00000ULL, 0x400000ULL, 
        0x2000000ULL, 0x5000000ULL, 0xA000000ULL, 0x14000000ULL, 0x28000000ULL, 0x50000000ULL, 0xA0000000ULL, 0x40000000ULL, 
        0x200000000ULL, 0x500000000ULL, 0xA00000000ULL, 0x1400000000ULL, 0x2800000000ULL, 0x5000000000ULL, 0xA000000000ULL, 0x4000000000ULL, 
        0x20000000000ULL, 0x50000000000ULL, 0xA0000000000ULL, 0x140000000000ULL, 0x280000000000ULL, 0x500000000000ULL, 0xA00000000000ULL, 0x400000000000ULL, 
        0x2000000000000ULL, 0x5000000000000ULL, 0xA000000000000ULL, 0x14000000000000ULL, 0x28000000000000ULL, 0x50000000000000ULL, 0xA0000000000000ULL, 0x40000000000000ULL, 
        0x200000000000000ULL, 0x500000000000000ULL, 0xA00000000000000ULL, 0x1400000000000000ULL, 0x2800000000000000ULL, 0x5000000000000000ULL, 0xA000000000000000ULL, 0x4000000000000000ULL, 
        0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL}, {
        0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 
        0x2ULL, 0x5ULL, 0xAULL, 0x14ULL, 0x28ULL, 0x50ULL, 0xA0ULL, 0x40ULL, 
        0x200ULL, 0x500ULL, 0xA00ULL, 0x1400ULL, 0x2800ULL, 0x5000ULL, 0xA000ULL, 0x4000ULL, 
        0x20000ULL, 0x50000ULL, 0xA0000ULL, 0x140000ULL, 0x280000ULL, 0x500000ULL, 0xA00000ULL, 0x400000ULL, 
        0x2000000ULL, 0x5000000ULL, 0xA000000ULL, 0x14000000ULL, 0x28000000ULL, 0x50000000ULL, 0xA0000000ULL, 0x40000000ULL, 
        0x200000000ULL, 0x500000000ULL, 0xA00000000ULL, 0x1400000000ULL, 0x2800000000ULL, 0x5000000000ULL, 0xA000000000ULL, 0x4000000000ULL, 
        0x20000000000ULL, 0x50000000000ULL, 0xA0000000000ULL, 0x140000000000ULL, 0x280000000000ULL, 0x500000000000ULL, 0xA00000000000ULL, 0x400000000000ULL, 
        0x2000000000000ULL, 0x5000000000000ULL, 0xA000000000000ULL, 0x14000000000000ULL, 0x28000000000000ULL, 0x50000000000000ULL, 0xA0000000000000ULL, 0x40000000000000ULL}};

        //Horizontal Lookup Table
        static constexpr uint8_t hlt[8][64] =
        {{0xFE, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x3E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x7E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x3E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2}, {
        0x0, 0xFD, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x3D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x7D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x3D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5}, {
        0x0, 0x0, 0xFB, 0xFA, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x3B, 0x3A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x7B, 0x7A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x3B, 0x3A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA}, {
        0x0, 0x0, 0x0, 0x0, 0xF7, 0xF6, 0xF4, 0xF4, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14, 
        0x0, 0x0, 0x0, 0x0, 0x37, 0x36, 0x34, 0x34, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14, 
        0x0, 0x0, 0x0, 0x0, 0x77, 0x76, 0x74, 0x74, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14, 
        0x0, 0x0, 0x0, 0x0, 0x37, 0x36, 0x34, 0x34, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14}, {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0xEF, 0xEE, 0xEC, 0xEC, 0xE8, 0xE8, 0xE8, 0xE8, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x6F, 0x6E, 0x6C, 0x6C, 0x68, 0x68, 0x68, 0x68, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28}, {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0xDF, 0xDE, 0xDC, 0xDC, 0xD8, 0xD8, 0xD8, 0xD8, 
        0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x5F, 0x5E, 0x5C, 0x5C, 0x58, 0x58, 0x58, 0x58, 
        0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50}, {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0xBF, 0xBE, 0xBC, 0xBC, 0xB8, 0xB8, 0xB8, 0xB8, 
        0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 
        0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 
        0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0}, {
        0x7F, 0x7E, 0x7C, 0x7C, 0x78, 0x78, 0x78, 0x78, 
        0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 
        0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
        0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40}};

        //Rook Offset, Masks, and Boards
        static constexpr int RookOffset[64] = 
        {0x0, 0x1000, 0x1800, 0x2000, 
        0x2800, 0x3000, 0x3800, 0x4000, 
        0x5000, 0x5800, 0x5C00, 0x6000, 
        0x6400, 0x6800, 0x6C00, 0x7000, 
        0x7800, 0x8000, 0x8400, 0x8800, 
        0x8C00, 0x9000, 0x9400, 0x9800, 
        0xA000, 0xA800, 0xAC00, 0xB000, 
        0xB400, 0xB800, 0xBC00, 0xC000, 
        0xC800, 0xD000, 0xD400, 0xD800, 
        0xDC00, 0xE000, 0xE400, 0xE800, 
        0xF000, 0xF800, 0xFC00, 0x10000, 
        0x10400, 0x10800, 0x10C00, 0x11000, 
        0x11800, 0x12000, 0x12400, 0x12800, 
        0x12C00, 0x13000, 0x13400, 0x13800, 
        0x14000, 0x15000, 0x15800, 0x16000, 
        0x16800, 0x17000, 0x17800, 0x18000};
        static constexpr Bitboard RookMasks[64] = 
        {0x101010101017EULL, 0x202020202027CULL, 0x404040404047AULL, 0x8080808080876ULL, 
        0x1010101010106EULL, 0x2020202020205EULL, 0x4040404040403EULL, 0x8080808080807EULL, 
        0x1010101017E00ULL, 0x2020202027C00ULL, 0x4040404047A00ULL, 0x8080808087600ULL, 
        0x10101010106E00ULL, 0x20202020205E00ULL, 0x40404040403E00ULL, 0x80808080807E00ULL, 
        0x10101017E0100ULL, 0x20202027C0200ULL, 0x40404047A0400ULL, 0x8080808760800ULL, 
        0x101010106E1000ULL, 0x202020205E2000ULL, 0x404040403E4000ULL, 0x808080807E8000ULL, 
        0x101017E010100ULL, 0x202027C020200ULL, 0x404047A040400ULL, 0x8080876080800ULL, 
        0x1010106E101000ULL, 0x2020205E202000ULL, 0x4040403E404000ULL, 0x8080807E808000ULL, 
        0x1017E01010100ULL, 0x2027C02020200ULL, 0x4047A04040400ULL, 0x8087608080800ULL, 
        0x10106E10101000ULL, 0x20205E20202000ULL, 0x40403E40404000ULL, 0x80807E80808000ULL, 
        0x17E0101010100ULL, 0x27C0202020200ULL, 0x47A0404040400ULL, 0x8760808080800ULL, 
        0x106E1010101000ULL, 0x205E2020202000ULL, 0x403E4040404000ULL, 0x807E8080808000ULL, 
        0x7E010101010100ULL, 0x7C020202020200ULL, 0x7A040404040400ULL, 0x76080808080800ULL, 
        0x6E101010101000ULL, 0x5E202020202000ULL, 0x3E404040404000ULL, 0x7E808080808000ULL, 
        0x7E01010101010100ULL, 0x7C02020202020200ULL, 0x7A04040404040400ULL, 0x7608080808080800ULL, 
        0x6E10101010101000ULL, 0x5E20202020202000ULL, 0x3E40404040404000ULL, 0x7E80808080808000ULL};
        
        static Bitboard RookBoards[0x19000];

        static Bitboard hqRookAttack(int, Bitboard);
        static Bitboard rookAttack(int, Bitboard);

        //Bishop Offset, Masks, and Boards
        static constexpr int BishopOffset[64] = 
        {0x0, 0x40, 0x60, 0x80, 
        0xA0, 0xC0, 0xE0, 0x100, 
        0x140, 0x160, 0x180, 0x1A0, 
        0x1C0, 0x1E0, 0x200, 0x220, 
        0x240, 0x260, 0x280, 0x300, 
        0x380, 0x400, 0x480, 0x4A0, 
        0x4C0, 0x4E0, 0x500, 0x580, 
        0x780, 0x980, 0xA00, 0xA20, 
        0xA40, 0xA60, 0xA80, 0xB00, 
        0xD00, 0xF00, 0xF80, 0xFA0, 
        0xFC0, 0xFE0, 0x1000, 0x1080, 
        0x1100, 0x1180, 0x1200, 0x1220, 
        0x1240, 0x1260, 0x1280, 0x12A0, 
        0x12C0, 0x12E0, 0x1300, 0x1320, 
        0x1340, 0x1380, 0x13A0, 0x13C0, 
        0x13E0, 0x1400, 0x1420, 0x1440};
        static constexpr Bitboard BishopMasks[64] = 
        {0x40201008040200ULL, 0x402010080400ULL, 0x4020100A00ULL, 0x40221400ULL,
        0x2442800ULL, 0x204085000ULL, 0x20408102000ULL, 0x2040810204000ULL,
        0x20100804020000ULL, 0x40201008040000ULL, 0x4020100A0000ULL, 0x4022140000ULL,
        0x244280000ULL, 0x20408500000ULL, 0x2040810200000ULL, 0x4081020400000ULL,
        0x10080402000200ULL, 0x20100804000400ULL, 0x4020100A000A00ULL, 0x402214001400ULL,
        0x24428002800ULL, 0x2040850005000ULL, 0x4081020002000ULL, 0x8102040004000ULL,
        0x8040200020400ULL, 0x10080400040800ULL, 0x20100A000A1000ULL, 0x40221400142200ULL,
        0x2442800284400ULL, 0x4085000500800ULL, 0x8102000201000ULL, 0x10204000402000ULL, 
        0x4020002040800ULL, 0x8040004081000ULL, 0x100A000A102000ULL, 0x22140014224000ULL,
        0x44280028440200ULL, 0x8500050080400ULL, 0x10200020100800ULL, 0x20400040201000ULL,
        0x2000204081000ULL, 0x4000408102000ULL, 0xA000A10204000ULL, 0x14001422400000ULL,
        0x28002844020000ULL, 0x50005008040200ULL, 0x20002010080400ULL, 0x40004020100800ULL,
        0x20408102000ULL, 0x40810204000ULL, 0xA1020400000ULL, 0x142240000000ULL,
        0x284402000000ULL, 0x500804020000ULL, 0x201008040200ULL, 0x402010080400ULL,
        0x2040810204000ULL, 0x4081020400000ULL, 0xA102040000000ULL, 0x14224000000000ULL,
        0x28440200000000ULL, 0x50080402000000ULL, 0x20100804020000ULL, 0x40201008040200ULL};
        
        static Bitboard BishopBoards[0x1480];

        static Bitboard hqBishopAttack(int, Bitboard);
        static Bitboard bishopAttack(int, Bitboard);

        static void initSlideAttacks();

        Bitboard sides[2], pieces[6];
        bool toMove;

        uint8_t cf[2] = {7, 0};
        uint8_t crc[64] = 
            {8, 0, 0, 0, 12, 0, 0, 4,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             2, 0, 0, 0, 3, 0, 0, 1};

        int thm, chm[128];
        uint8_t cr[128]; //last 4 bits q k Q K
        uint8_t ep[128];

        uint64_t zhist[128];

        //zobrist history and keys
        static constexpr uint64_t zpk[2][6][64] =
        {{{0x2160BAA77317BB5CULL, 0xC186DC9E498A889AULL, 0xD03760D35345B01EULL, 0xE49BEFB1100DCFAEULL, 
        0xFBB9DE5E55909842ULL, 0x8FD9B930F35E625EULL, 0x5AEE8334E2AB5369ULL, 0x2B57D1C981225BFBULL, 
        0x8615BD79E5249815ULL, 0x7D68660FB67927E4ULL, 0x4F8D3C59E74DC8DULL, 0x19207F2EEC25039AULL, 
        0xC6735E3B1B697EADULL, 0x27B72D75C2B533B9ULL, 0xA52AB9DA6F33D965ULL, 0x5D9B49B222FB285FULL, 
        0xA7AE13BEB10E6C27ULL, 0x6763214A47B2CE2EULL, 0x22E60EF4E767EC2CULL, 0x2FE2EA34DC7CCFDDULL, 
        0x94603C5AA243EA66ULL, 0x5C10171856B36947ULL, 0x40FE086519F914BAULL, 0x52DD4B25B814CC77ULL, 
        0x35311CD599730407ULL, 0x992AFBF2C436DAF6ULL, 0x94D5F23C0C9B1524ULL, 0x5EFE266E1400251BULL, 
        0x450666059DD87690ULL, 0xAEDB25C11F80A750ULL, 0x1F4ECE99604A8BFBULL, 0x89CC640F1698F49CULL, 
        0xAACFA7114CD0FC40ULL, 0x557DDBB07925F8A2ULL, 0xBEDE00245E455950ULL, 0x5EE9D16940E95216ULL, 
        0x8B13E2CBC12A3B38ULL, 0x3631DFA85A393826ULL, 0x121EEDE0E1EB941DULL, 0xFA3ED7545EFFCF0ULL, 
        0xC828527ECF20AC1ULL, 0x5CEDEB1414976F73ULL, 0xB40DA1770CDBB2BBULL, 0xB90BAFB7AA6C314FULL, 
        0xA2C899BBD44BF30CULL, 0xF158ECC21CE2FA17ULL, 0xBC8E50C7F01ED540ULL, 0xA118992F8166EDA8ULL, 
        0x3DEEF9E7A2BC3772ULL, 0x17AAE2F4AEAADB25ULL, 0xAD2D86E9CDF823D2ULL, 0x412C5C5B25CFC1F8ULL, 
        0xAB0E8FD3FA60FC72ULL, 0xD52A362F6FD20D94ULL, 0xA02DE1909B820290ULL, 0x93E134D6707E7121ULL, 
        0x5114FED2C5889785ULL, 0x63879B2CDA274EEAULL, 0xFA72F3C182A77525ULL, 0x46FE762C52DB3E1AULL, 
        0x613DDFBB4275E32ULL, 0xC436B36813A90B9FULL, 0xAC8D4464E19C3D8CULL, 0x519D13C16C194C5AULL},

        {0x86D07B824817A8BBULL, 0x292F1E9C35F3428AULL, 0xC1F035B5408F7C54ULL, 0x83A8EE0E53DCB144ULL, 
        0x45E66D537A56E67ULL, 0x2EA535B05F820BECULL, 0xBDCF9D969B9C673BULL, 0xE273252C7BD94DC8ULL, 
        0x4BADEF6ADA0CA2ACULL, 0x38C2A5A89E596130ULL, 0xB463C72D55DE6BB5ULL, 0x2DFCA53E04A3B088ULL, 
        0x80F081FD92255AD3ULL, 0xD706A9CF1308818EULL, 0xE8D8F590E62CB45BULL, 0xE2E212D7F60A5EE4ULL, 
        0x6F8EB845FF593569ULL, 0x92666F6431E0E4E1ULL, 0xB044F7C1E044B8AAULL, 0xC204B083CB21397AULL, 
        0xA9B8ED5D3C4BBB48ULL, 0xFDD8D4ED8D9CBB81ULL, 0x3817ABDAE494E8BCULL, 0xD4F3F074ECEAA001ULL, 
        0x58B54A4B7D837528ULL, 0x60FD3047C4791D33ULL, 0x46DBA1365C5E4F93ULL, 0x5E5A34002DDC0462ULL, 
        0xA7119E2C1EF8B7AULL, 0xF889B04B9C07178AULL, 0xE91D4684B3C446D3ULL, 0x9A007C7BA7EC65E3ULL, 
        0x7015031A6D4D3037ULL, 0xD9770C1738FFF49CULL, 0xB209674BD705CBBEULL, 0x574E14A7D4D9FC1BULL, 
        0x1BD0D30F831B9D80ULL, 0x92E46C02F92E1CBEULL, 0x586225FA60CF69BULL, 0x3F8E415BB3876926ULL, 
        0xACF451B7A37CFF32ULL, 0xC510658351B2767ULL, 0x858757EF9E617A52ULL, 0xCA02FE8EC082FC92ULL, 
        0xEBF868F43884A7C0ULL, 0xE57E5F366203E04ULL, 0xFC1366EEDA916789ULL, 0x907904C19880E84BULL, 
        0x50A310751C8837F7ULL, 0xF8748D950AE9BF23ULL, 0xE69C71211AB812FAULL, 0x628475E517C081B5ULL, 
        0xB46E6859E6E79C2AULL, 0xCC50772940D10828ULL, 0xD580E21B4C1E3DABULL, 0xD4201288F1DC62C8ULL, 
        0x60CB6669F00E5102ULL, 0xDE1663196591E937ULL, 0xE08F6216FF3EC8CDULL, 0xABBE5E53389F3E8AULL, 
        0x24B00CC398E94206ULL, 0xEA9C1024E4D99D92ULL, 0x8BCEBF1DBA98370DULL, 0x2CE712F3AF5B00C2ULL, 
        },

        {0x2676E007770E27C5ULL, 0x526DA845DEDE3729ULL, 0xCF6127A31CAF9A14ULL, 0x7BA56C1B65540ECEULL, 
        0xA5FD5A3E2CCC0869ULL, 0xBE583E2CBCC5EBULL, 0xE7D5CD0A8E245237ULL, 0x1BDCDBF3E9A18B66ULL, 
        0x34C3E1967828999AULL, 0x54266240C9357FDFULL, 0x5B6617A153398AD6ULL, 0x841C358D0B9282B5ULL, 
        0x854A39D8628198F0ULL, 0x722653858615CE9DULL, 0xAD329A14D2EB3A05ULL, 0x18A02F5C74792037ULL, 
        0x41544AB5E1342459ULL, 0x2871291C64DA41C6ULL, 0x894430F5527EB1E6ULL, 0x7FBB7814FB30FDE9ULL, 
        0x41563C07497C586AULL, 0x9F2DB6541E2C0ECDULL, 0x200E69686B100C20ULL, 0x1E4BA88A2174D39FULL, 
        0x6A23A8383E6566C7ULL, 0x6A29A670027371ADULL, 0xF5EA821D9CE7B99CULL, 0xFDD0E59CBEA6B0E5ULL, 
        0x25A5C6AC04A43B26ULL, 0xFA6FB2A91A726AADULL, 0x907A22D8A0F1E1DEULL, 0x968E25F4680A4C97ULL, 
        0xA02EE8CF7611CDBDULL, 0xCB2EEDAFE2041E69ULL, 0x669EA970F49CCCA2ULL, 0x6ED122B4F1A15B18ULL, 
        0xD13EB8692A61ABF6ULL, 0x43FF0052057FE999ULL, 0x33728D3BE2E9C69EULL, 0xC6492B4B9C29D687ULL, 
        0xC1C60E7E7800F332ULL, 0xE017BE208C2AD40FULL, 0xCBB9E03E5D860FDFULL, 0xFE985B5AE3E7953CULL, 
        0x73E5AA765D7C0464ULL, 0xD6DC9DDE3BDC0C26ULL, 0x89A8B1EC4681CE35ULL, 0x4B68E292A69F809BULL, 
        0x3F3CC48344405FCFULL, 0x95E0B246A9C39545ULL, 0x129BCEBE4CDB59CCULL, 0xDE17F4040B4C3203ULL, 
        0x8429F62A6D05017FULL, 0x87326E0F8D5BFF6BULL, 0xF3FC7A76A2E86F25ULL, 0xAF35C9BF8F4BF454ULL, 
        0x24CD0A149C8AB75AULL, 0xA5152AB7DBD8D7A6ULL, 0xAEE064B197D41618ULL, 0xE5E896B573EB7651ULL, 
        0xB0F47A8947561F7CULL, 0x1DDF8C7C76341A44ULL, 0xD9A875A856FB52B9ULL, 0x69E59710128F1719ULL},

        {0x47A5F271E893D5E9ULL, 0x38C2A24438271E2AULL, 0xB5453D07CE727310ULL, 0x754FC06ADCBA5E04ULL, 
        0xD76CD6E04E85FFF5ULL, 0x7739DF139A49FD5ULL, 0x4F3D54A6B46941BBULL, 0x8192F4A89C215F6DULL, 
        0x6154412E3C30D166ULL, 0xC5B8C07F757FBD8BULL, 0xA11401FBEDB6A4F6ULL, 0x792A718924EB3A43ULL, 
        0xAB1C014847408C57ULL, 0x284939651D3A83BDULL, 0x5E219FCDCA40337DULL, 0xB8328D6EE172D897ULL, 
        0x25B50420C7966EE9ULL, 0x32883F16D2EC3CEBULL, 0xC4F082F787499CE9ULL, 0xBC68D85DC98BB16BULL, 
        0x40B88FC481DBBA47ULL, 0xF1062FD09A1B2FE1ULL, 0xF5C8E30E4E138E9ULL, 0xA0CE5EAED8014ADEULL, 
        0xB69155F095A90CBAULL, 0x5819B9EEF82D0916ULL, 0x3DBF1CFD48888FCBULL, 0x68E4BA79F4B8FDD1ULL, 
        0x60091F32171E13E7ULL, 0x5BC1A6614079A372ULL, 0xABFC53B7DE6947CDULL, 0x32536C502B412BA3ULL, 
        0x22A6CE9627E65D8ULL, 0x4DD1C5DD0D7208BDULL, 0x8ADE7B0369664F4CULL, 0x20FE8DF6B508194DULL, 
        0x841506EF81F2884EULL, 0x94DC3928EB6C895CULL, 0xCE3401B1806EDE67ULL, 0xAF563F002DD72BDULL, 
        0x3FA92C5763646B07ULL, 0xA668904154E2910ULL, 0xC19F1EA0AA78A9D9ULL, 0x6E23353DC947C3A0ULL, 
        0x715DFAD5DA86B7BFULL, 0xEC51523877AA855BULL, 0xF94005351F29EC96ULL, 0x90DE73190F23748EULL, 
        0xEB2C045D5DA27CC9ULL, 0xCE39EDE3E942FC74ULL, 0x854A6BA2648B77A0ULL, 0x40F94C66FED7A887ULL, 
        0x146D51FB6BDA6A3DULL, 0xA132078D1F5C750AULL, 0xC1AC55FCFBD4303ULL, 0x3411A30C0F000C8DULL, 
        0x7D99A29E5F1C2D44ULL, 0xD66361F4918A8D8EULL, 0xB154791AF724BAEFULL, 0xE179813C37769425ULL, 
        0x3EC383C57B1B9DC1ULL, 0x56ED5984F21B026CULL, 0xB6B84C2FC2A111BCULL, 0x979B94417CAEFD9EULL},

        {0x9888CC592E2C693BULL, 0xC560790D1ABFCEB4ULL, 0x2B4EC40184E64476ULL, 0x819A8F8962FB3B7AULL, 
        0xF00ECB1E73CF3F01ULL, 0x816BEBF03A5BC03EULL, 0x92EF9CBB0497561CULL, 0xCBA0AE3C2E86A258ULL, 
        0xD57305AC513994AULL, 0x1B733547FE9463FAULL, 0xE3F15F3F0295BCEAULL, 0xB2F3112252C0577AULL, 
        0x249B0FD0A07F78E1ULL, 0xFAC834F9A29DBD84ULL, 0x3B8C637470B07D20ULL, 0x7E6494D48109939BULL, 
        0x637C542D87FC2F9EULL, 0x301A2978D1303B1AULL, 0xF2EDD453B9B9657DULL, 0xB0A8A1298A9386ECULL, 
        0x1CFC59A21A2086EAULL, 0xF4000C11CAED9583ULL, 0x29E6802B150A7920ULL, 0x4EE82A57FE4D9948ULL, 
        0x336B195FACFD39EDULL, 0xBD197AF33CA714B4ULL, 0x5C2377C54AD75496ULL, 0x9645D462CD6496DCULL, 
        0x89BA81896F06BF79ULL, 0x5EE17E6C2204D8DBULL, 0xBC0E48BB32A9F70EULL, 0x607295F3745B23A2ULL, 
        0xD8C00ACB3194F111ULL, 0x5978D89951CFD0E9ULL, 0xCEE33A865EC4DC77ULL, 0x5E61093A6561C4E3ULL, 
        0x26427853D260EA58ULL, 0x282C10ED03DD9BB6ULL, 0x914AFDD6250C610FULL, 0xDE271AEC03D01ADDULL, 
        0x7B8EC4C91086164EULL, 0x68BF75D2C3FE5F3ULL, 0x6FBCA171D4F79035ULL, 0x26D05AE09C170025ULL, 
        0xE96F31CFB77B17EEULL, 0x65C49FBD8D55099CULL, 0x77C262BC125DCDC5ULL, 0xC2C1102C8CF0472CULL, 
        0x68E39E791B60D48BULL, 0xD8EC8E00FC9EF0E5ULL, 0x713C61861818A342ULL, 0x5E774821A439995ULL, 
        0x7D8F108ECD3E5FD0ULL, 0xEEAE6DD04586975AULL, 0x9DCE71A2768CDCE2ULL, 0x3BB09441F68A5D07ULL, 
        0x3960AD5CDF04E093ULL, 0x5996003C1711E73ULL, 0xF2AEC7E5330D5A81ULL, 0xAB89B8A4FD520AA3ULL, 
        0xE01A7025321CC419ULL, 0xF934EDAE7A1E697ULL, 0x98FB7AA0DB0B5256ULL, 0x55FBB7F90048F73AULL},

        {0xEADFBB21965FBCD0ULL, 0x82353FFCA4C2A7BCULL, 0x8B0C0AD81C1CE49BULL, 0xB16ECBAD708D7FA0ULL, 
        0x22E759B815AC7BEBULL, 0xFDA558E02D0A1B38ULL, 0x1853003D920CF164ULL, 0x42B6E6EF89333C4BULL, 
        0x3BC727E08D66E9B8ULL, 0xBB348788F7991FA4ULL, 0xB5C35C09AB3B257AULL, 0x5A4AAC261ED7F4C2ULL, 
        0xCE92ADF4DFCE697FULL, 0x69CA0FAE6175BBBAULL, 0x8BD9712EB3B84072ULL, 0xDF415611EA42432FULL, 
        0x16468C29F3EB9135ULL, 0xDD28E76BB237866ULL, 0xFBB914B882B5F4F5ULL, 0xC195DC7BE8293F01ULL, 
        0x9C218CD737CB6CC2ULL, 0x380064797B3F95ACULL, 0x99F59CBEA433BB08ULL, 0x9FD9D44D7BD4B56ULL, 
        0x4930BB808722CEBBULL, 0x876ABEA35338CBABULL, 0x3F38F829C201369BULL, 0x81933AD843B6CC62ULL, 
        0x8963CC71440476EAULL, 0x92A16B66BEAFDD7FULL, 0xBAC55326B9D61A82ULL, 0xD6B31F693654B7E8ULL, 
        0x4C646777B528FCBEULL, 0xD17EF065D63AC2FBULL, 0x2D0CADC4EFC26FBFULL, 0x839B048B088C7D57ULL, 
        0x3A60499D6B235255ULL, 0xDA5E39BF7B1D75C9ULL, 0xBFE891B370985F4CULL, 0x778D8B1EACABB669ULL, 
        0xD1B12543D7312C9CULL, 0x31AE8444FCBC5DC0ULL, 0xD8653EBF3C612A32ULL, 0xA02060D3ED3B7CF0ULL, 
        0x685CBAADC90259C6ULL, 0x7174CB11024AE815ULL, 0x690EB24CD939A764ULL, 0x608B967A20232509ULL, 
        0xBB03E140D594C74CULL, 0x90958145D5765C0ULL, 0x293C9744356BE86FULL, 0x9910F57DECD61591ULL, 
        0xD784B33A51CA11E6ULL, 0x66555C3E647541AFULL, 0x13B06592F3821E12ULL, 0x3B09C88D400FA8BBULL, 
        0x46FCA2753E3DEBE7ULL, 0x620154233BEFB10EULL, 0xB153F31198D76773ULL, 0x5ABB103EB1E22FA6ULL, 
        0x7ABC09E53D132ED7ULL, 0x795FDC6F48CCD8E7ULL, 0x3D34D644C8999EEBULL, 0xA95255A8437E175AULL}},

        {{0xE83F8FCC7F96FE04ULL, 0x757AE181AA9DFFBEULL, 0xEFB4C5B3911BB73CULL, 0xFE9DC92CD3CC00FULL, 
        0xF65D3948F146FFCFULL, 0x6CB04687F4A11560ULL, 0x5019F1A3AB315030ULL, 0x35F104545C3FDAC0ULL, 
        0x3D0170C417D44080ULL, 0x1CFEE6F5AAC14A24ULL, 0x4D6D4D2A8553F8F5ULL, 0xE49FF6558C5297C4ULL, 
        0x767E9DD7F6BE2574ULL, 0x7EC79D9787AD89ABULL, 0x7367362B06A9497BULL, 0xF6DA0E20C21A25C0ULL, 
        0x343B7CDA441F6D68ULL, 0x1C71C0E1D318DE9DULL, 0x3ACFB56F88102E6DULL, 0xA74ECB78973F885DULL, 
        0x9F12995220C27896ULL, 0x968DE939A06A5A8FULL, 0xB558247AFC751CDULL, 0x3528951B2F35DE61ULL, 
        0x506901A29E2780EDULL, 0xA7F3B9AE44DBA42EULL, 0x81739AF9D25167B8ULL, 0x209E9E4F2835DF7EULL, 
        0x7C7C2E58B8BDE3E3ULL, 0xEDF2796B996B1C33ULL, 0x1C379AB396021031ULL, 0x6956E40301FA5756ULL, 
        0xE185F3E6404F1EC5ULL, 0x218BC770EFFCE552ULL, 0x20F98595B0375F8AULL, 0x5F00F05246788B46ULL, 
        0xAB72EFA209D4641AULL, 0xC1F2ABEF3E5FF9DAULL, 0xD3D0D7FC9CC991B3ULL, 0xA8FED43F75374CA5ULL, 
        0xE0594645D8665508ULL, 0xF5DC0A85D23FC44BULL, 0x9EB5BFBA0D0C1691ULL, 0x4CBAAEE98599704DULL, 
        0x2383B886713EFD1ULL, 0x6F5EE69107F9B719ULL, 0xCFB55C17A6F0505ULL, 0xE34F5B1A8499BC19ULL, 
        0x97580ADD07A7C30CULL, 0x1E0CC46A397845BFULL, 0xEBDA5BBBB95153C0ULL, 0x7051FF52655517E0ULL, 
        0x56CE0487DA5DBC0FULL, 0x72148670642B36C3ULL, 0xB9F2AC5706C6C497ULL, 0x5E87323B60671B82ULL, 
        0x642F9CF9640648C9ULL, 0xA96DB89B98E00DCDULL, 0xEA217678F6584C72ULL, 0x9CC510A850EA69AFULL, 
        0xBB73E5ADEA7E8F62ULL, 0x996ED51025C399E0ULL, 0x73609E78F699198CULL, 0xDA9687FF8CCCAE10ULL},

        {0x4913652C3F635B0ULL, 0x834481E88D1C6DE9ULL, 0x9E8070B2D0E3D7EFULL, 0x9AEA37BB35026217ULL, 
        0x6DCB73DDE4073301ULL, 0x1D7ECF22594A4C00ULL, 0xE2A83A23D1443B2FULL, 0x1D367B4B98B55402ULL, 
        0x94FFA6BFDF4B4C32ULL, 0xABD69A97FED6BB79ULL, 0xC190B3DB718E8DFEULL, 0xD6D96818F6326D5EULL, 
        0xDA752761C0719B57ULL, 0xAB478483242695E7ULL, 0xD9F822CB5440970FULL, 0xC64C9D7EC9E18298ULL, 
        0x902ABA7908933A98ULL, 0x5513D997F2DAA321ULL, 0xD3B2C7CA4D5CB533ULL, 0xDCF310DBD34F2E38ULL, 
        0xED4C21F69C5C6A3EULL, 0x2D386962EB0B492ULL, 0x4CEB69BE2BBCFBC0ULL, 0xC94DD4FAD373CCB5ULL, 
        0x1584F3E7F464CF06ULL, 0x3641C5BC436E0526ULL, 0xE38B7F5ADE28E896ULL, 0xB3107A6D5C075AEEULL, 
        0xAD336A547450E803ULL, 0x84FD84C64F08F7BBULL, 0xCB558E56BA888D40ULL, 0x5719FE6366EAE930ULL, 
        0x652A32B46BF46DB6ULL, 0x511D934361E974E7ULL, 0x1F7561F043D56FAAULL, 0xA4D93EE89E1AEF53ULL, 
        0xBF75B60F1F401243ULL, 0xE5871BC155DEE681ULL, 0xEE7D705090824474ULL, 0x289174D007612C42ULL, 
        0xA72635BD5658F573ULL, 0x8984173C91B8552BULL, 0x486AFD186FD22342ULL, 0x1A9836FB2EEFAFA2ULL, 
        0x762B56DCD75B0DB6ULL, 0xDCDE00358D08B2EDULL, 0xB191E3880811FF47ULL, 0x624FBA3F111DD21FULL, 
        0xBA56E68B9E2928A3ULL, 0x8F7AF3510FA88868ULL, 0x5ABB1FBB236332B3ULL, 0x3A904192BB610F6CULL, 
        0x939F3D809AC60D08ULL, 0xEB6D5DE3F614A276ULL, 0xA8D90B7BF996A77CULL, 0x6F8F1E6F967CECA7ULL, 
        0xC31D49488060709CULL, 0x802F4092DEC2D5FDULL, 0xC8B8E9238CC9507BULL, 0x1AED12C2139E4FFULL, 
        0xB97269D8C0CD566FULL, 0x4B861D82027047A5ULL, 0x3129885A2900AEA3ULL, 0x8B441ECBD294707CULL, 
        },

        {0x6A9938CD4A751256ULL, 0xC11EDCC8A74D3789ULL, 0x5CA8C76B28AE67ACULL, 0xC0ACB1D03DBF4533ULL, 
        0xF27F15159D6DE90EULL, 0x3110A6232751672ULL, 0x9CCD2D4E865130B6ULL, 0x8BAF3ADDAC7138BEULL, 
        0xC39E34D35517977CULL, 0x52D1F00EFDC861F5ULL, 0x2301D77BFEBEB5CFULL, 0x37FCAD4470ACC7EFULL, 
        0xDACF23ADFF74A468ULL, 0x8733F151D92B4E5ULL, 0xA139A4AA81764196ULL, 0xA8F17F46B2FB1468ULL, 
        0xBB983A5EE0A28479ULL, 0x61FF03122A1F57D5ULL, 0x8A2BF28412893B56ULL, 0xE9D8E072E8167918ULL, 
        0x341AE646E881DB57ULL, 0x9636661F350EB451ULL, 0x2BCE60AABAACDD90ULL, 0xFB6038C1ED9AE25CULL, 
        0x69043077BCAE59ULL, 0x2C95EC34ACC65C5DULL, 0x60AD4F69E58A8B94ULL, 0xD3A46C4A42EA1265ULL, 
        0x8F31ED651B6EF4ABULL, 0x9DBF158C146B50ADULL, 0xABCDF409155EF75BULL, 0x147F55340EA7A7FAULL, 
        0xDDED332ABC7D017DULL, 0xCA88A8AEDB4BDF83ULL, 0x7470E67D7221CF66ULL, 0x54F00BE6730B865EULL, 
        0xE7351F17E1D7FC2DULL, 0x12C7C759089A4508ULL, 0xFC2522D6D8F943B3ULL, 0x728B8D3CE96A80A3ULL, 
        0x4A9FA0B3430115D9ULL, 0x45AD7D517A8993EAULL, 0xCC3C6F257B150584ULL, 0xF7910B9B7ECDCB7ULL, 
        0x6735C02EE25D1DB5ULL, 0x77AFE695B607CDB0ULL, 0xF001A4CFE095BDDFULL, 0x686EE088BF29C578ULL, 
        0x61CA4D89B51D2409ULL, 0xAE2BC2DBD43A3BAULL, 0x3BFF0286F27511DBULL, 0x6B7469C1CFF42110ULL, 
        0xA5B6A7C78DC6B12BULL, 0xA336828B3BC285EAULL, 0xBC17988427197B53ULL, 0xB9F1C0D892943B5ULL, 
        0xBDA5A4846AFB7188ULL, 0x737EC1785FCBF25CULL, 0xDADC2A1490B925DEULL, 0xD2F9CAA3FD020F2AULL, 
        0x9D2E3DFFD9C4A073ULL, 0xCE5F726024934BBBULL, 0xB110A995F98F0BEEULL, 0xA738CAA1F4EADE94ULL},

        {0xA11CBF4815A74EEULL, 0x673F7C11E30C11FULL, 0x715D0894534A8ABCULL, 0xA23C747009EC7905ULL, 
        0x5389F20522648A73ULL, 0x2F45547C637F5EE6ULL, 0x718987CA8ADD2473ULL, 0xBD977BDF9335448CULL, 
        0x5AEC585EC5E3AFD0ULL, 0x2F9AFDB27081D886ULL, 0xDF0D3DB9729FEA56ULL, 0xB7350FD97DB9F8F2ULL, 
        0xE10487B73255604AULL, 0x861327DB5D4BE878ULL, 0x50BD9516413D63FULL, 0xCE4E1BA4F8E2638EULL, 
        0xC76CFB6F035F719DULL, 0x6E48BC8A3B037077ULL, 0x720347730FFBE07DULL, 0x7FF5405B3BC29EC0ULL, 
        0x5B3C9DE8B930AFE6ULL, 0x7CBAB917E90D7918ULL, 0xDDAD9BA9E320329EULL, 0xFE335351CD77A011ULL, 
        0x54EC002FFBDF66BDULL, 0xD5B12EFAAC6B92F2ULL, 0xE5EE3C91D54FB25CULL, 0x2252D87E25B4E6A3ULL, 
        0x24F7B4155C774DB2ULL, 0xE4002595B8024E13ULL, 0x51EC2624C926C64CULL, 0xAAE7980D4E10F533ULL, 
        0xFAFD8268A662F168ULL, 0x58BDE70F6EFF64EULL, 0x6C068BB40BCEB26EULL, 0x6E6C1A33EBF33A41ULL, 
        0x11EB59F6996DE0A0ULL, 0x76EA1012B9161394ULL, 0x439A460D9A555A48ULL, 0x3508421A284635D9ULL, 
        0x1F1B1C150172BEBFULL, 0xD965466B24D8BA54ULL, 0x2C3F209817525D4EULL, 0x20113AB175B0E8B0ULL, 
        0x6402C577C16FAE4AULL, 0x6C69F669BD0DC66DULL, 0x4B483FDF40F0351DULL, 0x69F6C5F85D502E8DULL, 
        0x5810A836BDA07ACBULL, 0x6F38DFE3B734C1CDULL, 0x87AF2997C5BDC42AULL, 0x47859FDF4D58FD35ULL, 
        0xBCE85E8251B2DCF2ULL, 0x50B9B2C286D74FD8ULL, 0x7657AB87733A9CC9ULL, 0x4B541A7705C1913CULL, 
        0xE3DA5EBF4CEC402CULL, 0xAB8A450B0C1688B7ULL, 0x376DF0E33D6CA05ULL, 0x3CA166830F7BB242ULL, 
        0x7850694C8902BEACULL, 0x479626EC6D4E7237ULL, 0x45F09EC947017363ULL, 0xA0E2A19A58C1B3ECULL},

        {0xF76ADB2CA5575425ULL, 0xBB3A2D19D16707C9ULL, 0x7E66BF804510D90BULL, 0xD23BC55757894163ULL, 
        0xF8619A23DC382C36ULL, 0x1D59F9FC6C56D0DEULL, 0x7188C8BE2DE836CCULL, 0x53D5AC4434BD2A4BULL, 
        0xEFB5A9290A28C41BULL, 0x4CA530362F13658BULL, 0x99F3FED406C0DD72ULL, 0xB4B36DAE1CEE9187ULL, 
        0xD737D501AE935F71ULL, 0x9529CF80CC0512D9ULL, 0xC6C9C056A5E425FFULL, 0x8F74DF28EF69DBF5ULL, 
        0xBC280FA8E1078D5CULL, 0xDD9A945829496321ULL, 0xC01FA999B3631038ULL, 0xA0AB7792BBC091B9ULL, 
        0x37DBAC88DA9AD403ULL, 0xF0C5ADE95B3BD6D8ULL, 0x970C3DF09E758406ULL, 0x9BEC0EF930D3204ULL, 
        0xA08F42C506C5F0A4ULL, 0x2BC514EA84474964ULL, 0xDB00CEFEFA779D10ULL, 0x30F505A41F562D35ULL, 
        0xAC9F75D8F566D565ULL, 0x62DBC44275880A6CULL, 0x7BB47BAFC40FA26BULL, 0xF9AF632AA8D8ADEEULL, 
        0xC68728C1B33BB66DULL, 0x39F733FF9B772606ULL, 0x4D9644FE59DC7F95ULL, 0x2861413803641741ULL, 
        0xC650EDDC7C574896ULL, 0x44FD1612959493D2ULL, 0x1D21C136231BD27DULL, 0x8822A92B2C986BB8ULL, 
        0xC154E04310AA4ECAULL, 0x2DE7B8EA247D1469ULL, 0xE2F15BEC1E1EE39CULL, 0x8AA2674EDBEBD4D8ULL, 
        0x4B3E75082BEBE9FAULL, 0x7295AE611C4F161FULL, 0xCF3AAF29112757FAULL, 0x6A4BCF90AF444CBULL, 
        0x8034600E873EAAC3ULL, 0xA51BCD1441CDA347ULL, 0x972791D8B7F81C29ULL, 0xC941B00F1DD2FBD4ULL, 
        0xC974BA866DE5F43EULL, 0x23CC6AE217309F72ULL, 0x80DE56906542D23FULL, 0x9CE0D9B3F4AC6B5EULL, 
        0x54CA7438FD86DD51ULL, 0xE4D8A7AA2D7A1934ULL, 0x229A8C4ABF1D8E75ULL, 0xB27410EFC1233615ULL, 
        0xBECCB6807B30563FULL, 0x23529F7B15BC6426ULL, 0x7D15CE072AFECD69ULL, 0xCC4A53397D1F47EDULL},

        {0x3F205969FE58F8E9ULL, 0x8F85A93C481C3E3FULL, 0x999CB698480005DFULL, 0x5C76ABF54BEDC378ULL, 
        0x52727BB3B6289A2BULL, 0xBAFA4BC1D222CC2FULL, 0xF75FDBBDD01F1282ULL, 0x940151DA6ED1EF06ULL, 
        0xE3F6DAD3C4F7FD08ULL, 0x64C478C5D7633AEEULL, 0x2E8D816E8ED38324ULL, 0x5DF6BCCA72AECEBDULL, 
        0xF09FBD42FEF54DD1ULL, 0x14299B9DFAF49367ULL, 0x9EC9979099EBA30BULL, 0xDCA07B0B847D4DBEULL, 
        0x194576C36A611B3BULL, 0x4229D5F2CB0A0E01ULL, 0x319FEA4F18495A69ULL, 0x46F220C04EBDDB1DULL, 
        0xFC090B932B57347CULL, 0xBD59A3ADEDC327CEULL, 0x2AA2D650D371CAABULL, 0x40B344BD6FF94C4BULL, 
        0x1E7516C7F6609227ULL, 0x22AFAA5EEDFFAFFDULL, 0xAC343854CBF63512ULL, 0xEA94FF2F493D75FULL, 
        0x6F30E849107AC42AULL, 0x70DDCEF2FACBBC08ULL, 0xAF0485E3F3A802D0ULL, 0xB9F22715A66789B3ULL, 
        0x213726AD6F2E0988ULL, 0xC8D7571FAED09892ULL, 0x2EA7E7A538D29D03ULL, 0xB43F4F0DFDE718C5ULL, 
        0x903D40E2FA6C01B7ULL, 0xA48BE8AF79A37DEEULL, 0x13DE6CA4E2C96A19ULL, 0xF497834B71074550ULL, 
        0x8E6AF1FB80ACD357ULL, 0xD4A9F6894710020CULL, 0x8CCD244084210C97ULL, 0xD95D56E5FE5841ADULL, 
        0xB2FE72CFDFE93547ULL, 0x24F29A837DA14D0DULL, 0xB9AD51E8171DB16EULL, 0x835E1165C251FB0CULL, 
        0xC750E67F6C54BBF3ULL, 0x5A8485D5CDCA6296ULL, 0x606A7C6BDE5A340EULL, 0x6671360ED68C5EA6ULL, 
        0x503A13FBE829C183ULL, 0x99B70AD4ABE2EBADULL, 0xF2532228A853F776ULL, 0xFB4E61BC7D73C64ULL, 
        0x9547D6DB3560B6ECULL, 0xEFB21F585FF9EAC7ULL, 0x528FFDEBE412C7C3ULL, 0x989CFA5B1BD641CULL, 
        0x39B5F0A496BF5234ULL, 0x273F6A36C76FC491ULL, 0x4FA627801BF18D41ULL, 0xF689E1191A6C28A1ULL}}};

        static constexpr uint64_t zck[16] = 
        {0x37C87F5EDEC3C89CULL, 0x71761AD96A10C0ULL, 0x8CBC2AE5FADDB1C6ULL, 0x2CA535819B8C853ULL, 
        0xFC410D7590448ABCULL, 0xA917CAC2508D50BCULL, 0xFB7B5E9277D4D338ULL, 0x7FD622FECEA1BCA9ULL, 
        0x742170973C80ABC7ULL, 0xBBBABCCAE4B0E0F7ULL, 0x547256CADE8A236FULL, 0xB05CC3586B162FE0ULL, 
        0x1506C66F33719134ULL, 0xF44A1DD3F29EDD2ULL, 0xF468F5E983E98CA6ULL, 0x9F1A85F11B1758A3ULL};

        static constexpr uint64_t zek[8] = 
        {0x8A72FAE15A6CEEBFULL, 0xB8A0DD95FAEEED12ULL, 0x4FF90C9E32240495ULL, 0x5C44B7AE72DA80A9ULL, 
        0xE433521DB961BECEULL, 0x745F7A44232CE9A8ULL, 0x98A4CADFC53E0D3CULL, 0xF8631D6D7E0DE2CBULL}; 

        static constexpr uint64_t ztk = 0xDE9BA87421240D54ULL;

        //FEN-related parsing
        static constexpr char frchr[21] = 
        {'/', '1', '2', '3', '4', '5', '6', '7', '8',
            'k', 'q', 'r', 'b', 'n', 'p', 'K', 'Q', 'R', 'B', 'N', 'P'};

        static constexpr char cstrt[4] = 
        {'K', 'Q', 'k', 'q'};


        Bitboards();

        static void printAsBitboard(Bitboard);

        int pieceAt(int);

        //bool insufficientMaterial();

        void setStartPos();
        void empty();

        void print();

        void beginZobrist();
        void showZobrist();
        int countReps(int);

        void readFen(std::string);

};

/*
Function Definitions for Bitboards Class

TheTilted096, 12-19-24
Wilted Engine
*/

Bitboard Bitboards::RookBoards[0x19000];
Bitboard Bitboards::BishopBoards[0x1480];

Bitboards::Bitboards(){
    empty();
}

Bitboard Bitboards::hqRookAttack(int sq, Bitboard occ){
    Bitboard forward = occ & (0x0101010101010101ULL << (sq & 7));
    Bitboard reverse = __builtin_bswap64(forward);

    forward -= 2 * (1ULL << sq);
    reverse -= 2 * (1ULL << (56 ^ sq));

    forward ^= __builtin_bswap64(reverse);
    forward &= (0x0101010101010101ULL << (sq & 7)); //forward is now vertical attacks

    //printAsBitboard(forward, std::cout);

    Bitboard horizontal = ((uint64_t)hlt[sq & 7]
        [((((0xFFULL << ((sq & 56))) & occ) >> (sq & 56)) >> 1) & 63]) << (sq & 56);

    //printAsBitboard(horizontal, std::cout);
    //printAsBitboard(forward | horizontal, std::cout);

    return (forward | horizontal);
}

Bitboard Bitboards::rookAttack(int sq, Bitboard occ){
    return RookBoards[RookOffset[sq] + _pext_u64(occ, RookMasks[sq])];
}

Bitboard Bitboards::hqBishopAttack(int sq, Bitboard occ){
    //Position::printAsBitboard(occ);
    Bitboard ldiag = 0x8040201008040201ULL;
    Bitboard rdiag = 0x102040810204080ULL;

    Bitboard sqfile = 0x101010101010101ULL << (sq & 7);
    
    Bitboard forward, reverse;
    //right diagonal
    int d = __builtin_ctzll(sqfile & rdiag) - sq;
    //std::cout << d << '\n';
    Bitboard mask = (d >= 0) ? (rdiag >> d) : (rdiag << -d);
    forward = occ & mask;
    reverse = __builtin_bswap64(forward);
    forward -= 2 * (1ULL << sq);
    reverse -= 2 * (1ULL << (56 ^ sq));
    forward ^= __builtin_bswap64(reverse);
    forward &= mask;

    Bitboard result = forward; //save right diagonal attacks

    d = __builtin_ctzll(sqfile & ldiag) - sq;
    //std::cout << d << '\n';
    mask = (d >= 0) ? (ldiag >> d) : (ldiag << -d);
    forward = occ & mask;
    reverse = __builtin_bswap64(forward);
    forward -= 2 * (1ULL << sq);
    reverse -= 2 * (1ULL << (56 ^ sq));
    forward ^= __builtin_bswap64(reverse);
    forward &= mask;

    result |= forward;

    //Position::printAsBitboard(result);

    return result;
}

Bitboard Bitboards::bishopAttack(int sq, Bitboard occ){
    return BishopBoards[BishopOffset[sq] + _pext_u64(occ, BishopMasks[sq])];
}

void Bitboards::initSlideAttacks(){
    int pos = 0;
    Bitboard cons;

    const uint8_t RookBits[64] = 
        {12, 11, 11, 11, 11, 11, 11, 12,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        12, 11, 11, 11, 11, 11, 11, 12};

    //std::ofstream rt("rawTables.txt");

    for (int sq = 0; sq < 64; sq++){
        for (int idx = 0; idx < (1 << RookBits[sq]); idx++){
            cons = _pdep_u64(idx, RookMasks[sq]) | (1ULL << sq);
            RookBoards[pos] = hqRookAttack(sq, cons);
            //printAsBitboard(RookBoards[pos], rt);
            pos++;
        }
    }

    const uint8_t BishopBits[64] = 
        {6, 5, 5, 5, 5, 5, 5, 6, 
        5, 5, 5, 5, 5, 5, 5, 5, 
        5, 5, 7, 7, 7, 7, 5, 5, 
        5, 5, 7, 9, 9, 7, 5, 5, 
        5, 5, 7, 9, 9, 7, 5, 5, 
        5, 5, 7, 7, 7, 7, 5, 5, 
        5, 5, 5, 5, 5, 5, 5, 5, 
        6, 5, 5, 5, 5, 5, 5, 6};

    pos = 0;

    for (int sq = 0; sq < 64; sq++){
        for (int idx = 0; idx < (1 << BishopBits[sq]); idx++){
            cons = _pdep_u64(idx, BishopMasks[sq]) | (1ULL << sq);
            BishopBoards[pos] = hqBishopAttack(sq, cons);

            pos++;
        }
    }
}

void Bitboards::printAsBitboard(Bitboard board){
    for (int i = 0; i < 64; i++) {
        std::cout << (board & 1ULL);
        if ((i & 7) == 7) {
            std::cout << '\n';
        }
        board >>= 1;
    }
    std::cout << '\n';
}

int Bitboards::pieceAt(int sq){
    Bitboard sqbb = (1ULL << sq);
    for (int i = 0; i < 6; i++){
        if (pieces[i] & sqbb){
            return i;
        }
    }
    return 13; //in case of fail 
    //(but also en passant)
}

void Bitboards::setStartPos(){
    sides[0] = 0xFFFFULL;
    sides[1] = 0xFFFF000000000000ULL;

    pieces[0] = 0x1000000000000010ULL;
    pieces[1] = 0x800000000000008ULL;
    pieces[2] = 0x8100000000000081ULL;
    pieces[3] = 0x2400000000000024ULL;
    pieces[4] = 0x4200000000000042ULL;
    pieces[5] = 0xFF00000000FF00ULL;

    toMove = true;
    thm = 0;
    ep[0] = 255; //out of range en passant because there is none
    cr[0] = 15;    
}

void Bitboards::empty(){
    sides[0] = 0ULL; sides[1] = 0ULL;
    pieces[0] = 0ULL; pieces[1] = 0ULL; pieces[2] = 0ULL;
    pieces[3] = 0ULL; pieces[4] = 0ULL; pieces[5] = 0ULL;

    toMove = true;
    thm = 0;
    ep[0] = 255; //out of range en passant because there is none
    cr[0] = 0;    
}

void Bitboards::print(){
    std::cout << "sides[0] (black)\tsides[1] (white)\n";
    for (int i = 0; i < 8; i++){
        for (int j = 0; j < 8; j++){
            std::cout << ((sides[0] >> ((i << 3) + j)) & 1ULL);
        }
        std::cout << "\t\t";
        for (int j = 0; j < 8; j++){
            std::cout << ((sides[1] >> ((i << 3) + j)) & 1ULL);
        }
        std::cout << '\n';
    }

    std::cout << "\n\npieces[0]\tpieces[1]\tpieces[2]\tpieces[3]\tpieces[4]\tpieces[5]\n";
    for (int i = 0; i < 8; i++){
        for (int k = 0; k < 6; k++){
            for (int j = 0; j < 8; j++){
                std::cout << ((pieces[k] >> ((i << 3) + j)) & 1ULL);
            }
            std::cout << '\t';
        }
        std::cout << '\n';
    }
    std::cout << '\n';
    std::cout << "toMove: " << toMove << "\n\n";

    std::cout << "Half Move: " << chm[thm] << '\n';

    std::cout << "Castling: " << (int) cr[thm] << '\n';
    std::cout << "En Passant: " << (int) ep[thm] << "\n\n";
}

void Bitboards::readFen(std::string fen){
    //EXAMPLE: rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1 moves aa
    empty();

    std::stringstream segs(fen);

    std::string feed;

    segs >> feed; //main information segment
    
    uint8_t ind, sq = 0;
    for (char cc : feed){
        for (ind = 0; ind < 21; ind++){ //use std::find?
            if (frchr[ind] == cc){
                break;
            }
        }

        if ((0 < ind) and (ind < 9)){
            sq += ind;
            continue;
        }
        if ((ind >= 9) and (ind < 15)){
            pieces[ind - 9] |= (1ULL << sq);
            sides[0] |= (1ULL << sq);
            sq++;
            continue;
        }
        if ((ind >= 15) and (ind < 21)){
            pieces[ind - 15] |= (1ULL << sq);
            sides[1] |= (1ULL << sq);
            sq++;
            continue;
        }
    }

    segs >> feed; //side to move
    toMove = feed[0] & 1; //'w' = 119 and 'b' = 98;
    
    segs >> feed; //castling rights 'KQkq' or something
    feed += ' ';
    ind = 0;

    //input total 1/2 move clock starting at 0th
    thm = 0;

    //might want to optimize this later
    cr[0] |= (cstrt[0] == feed[ind]);
    ind += (cstrt[0] == feed[ind]);

    cr[0] |= ((cstrt[1] == feed[ind]) << 1);
    ind += (cstrt[1] == feed[ind]);

    cr[0] |= ((cstrt[2] == feed[ind]) << 2);
    ind += (cstrt[2] == feed[ind]);

    cr[0] |= ((cstrt[3] == feed[ind]) << 3);
    ind += (cstrt[3] == feed[ind]);

    segs >> feed; //en passant square
    ep[0] = (feed != "-") ? ((feed[0] - 97) + 8 * (56 - feed[1])) : 255;

    //implement half move clock
    segs >> feed;
    chm[0] = std::stoi(feed); 
}

void Bitboards::beginZobrist(){
    Bitboard pcs;
    int f;

    zhist[thm] = !toMove * ztk;

    for (int i = 0; i < 6; i++){
        pcs = sides[1] & pieces[i];
        while (pcs){
            f = __builtin_ctzll(pcs);
            zhist[thm] ^= zpk[1][i][f];
            pcs ^= (1ULL << f);
        }

        pcs = sides[0] & pieces[i];
        while (pcs){
            f = __builtin_ctzll(pcs);
            zhist[thm] ^= zpk[0][i][f];
            pcs ^= (1ULL << f);
        }
    }

    if (ep[thm] != 255){
        zhist[thm] ^= zek[ep[thm]];
    }

    zhist[thm] ^= zck[cr[thm]];
}

void Bitboards::showZobrist(){
    std::cout << "Zobrist History:\n";
    for (int i = 0; i < thm + 1; i++){
        std::cout << "ZH " << i << ": " << zhist[i] << '\n';
    }
}

int Bitboards::countReps(int ply){
    int reps = 1; //start with this repetition
    int rind = thm; //index starts at right now

    while ((rind > 0) and chm[rind]){ //while at the beginning and last 50mr reset,
        rind -= 2; //go back 2
        reps += ((zhist[thm] == zhist[rind]) * (1 + (rind >= thm - ply)));
        //add a rep if the position matches, add another if it occurs after search start
    }

    return reps;
}








