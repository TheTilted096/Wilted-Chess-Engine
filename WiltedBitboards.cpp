/*
Very Base Class for the Wilted Chess Engine
Class Definition of Bitboards

TheTilted096 12-18-24

Contains board representation and elementary makeMove

*/

#include <cassert>
#include <chrono>
#include <cstdint>
#include <cmath>
#include <fstream>
#include <immintrin.h>
#include <iostream>
#include <random>
#include <sstream>
#include <string>

typedef uint64_t Bitboard;
typedef uint64_t Hash;

class Bitboards{
    public:
        //Pawn Lookup Table
        
        //King and Knight Lookup Table
        static constexpr Bitboard KingAttacks[64] = 
        {0x302ULL, 0x705ULL, 0xE0AULL, 0x1C14ULL, 0x3828ULL, 0x7050ULL, 0xE0A0ULL, 0xC040ULL, 
        0x30203ULL, 0x70507ULL, 0xE0A0EULL, 0x1C141CULL, 0x382838ULL, 0x705070ULL, 0xE0A0E0ULL, 0xC040C0ULL, 
        0x3020300ULL, 0x7050700ULL, 0xE0A0E00ULL, 0x1C141C00ULL, 0x38283800ULL, 0x70507000ULL, 0xE0A0E000ULL, 0xC040C000ULL, 
        0x302030000ULL, 0x705070000ULL, 0xE0A0E0000ULL, 0x1C141C0000ULL, 0x3828380000ULL, 0x7050700000ULL, 0xE0A0E00000ULL, 0xC040C00000ULL, 
        0x30203000000ULL, 0x70507000000ULL, 0xE0A0E000000ULL, 0x1C141C000000ULL, 0x382838000000ULL, 0x705070000000ULL, 0xE0A0E0000000ULL, 0xC040C0000000ULL, 
        0x3020300000000ULL, 0x7050700000000ULL, 0xE0A0E00000000ULL, 0x1C141C00000000ULL, 0x38283800000000ULL, 0x70507000000000ULL, 0xE0A0E000000000ULL, 0xC040C000000000ULL, 
        0x302030000000000ULL, 0x705070000000000ULL, 0xE0A0E0000000000ULL, 0x1C141C0000000000ULL, 0x3828380000000000ULL, 0x7050700000000000ULL, 0xE0A0E00000000000ULL, 0xC040C00000000000ULL, 
        0x203000000000000ULL, 0x507000000000000ULL, 0xA0E000000000000ULL, 0x141C000000000000ULL, 0x2838000000000000ULL, 0x5070000000000000ULL, 0xA0E0000000000000ULL, 0x40C0000000000000ULL};

        static constexpr Bitboard KnightAttacks[64] = 
        {0x20400ULL, 0x50800ULL, 0xA1100ULL, 0x142200ULL, 0x284400ULL, 0x508800ULL, 0xA01000ULL, 0x402000ULL, 
        0x2040004ULL, 0x5080008ULL, 0xA110011ULL, 0x14220022ULL, 0x28440044ULL, 0x50880088ULL, 0xA0100010ULL, 0x40200020ULL, 
        0x204000402ULL, 0x508000805ULL, 0xA1100110AULL, 0x1422002214ULL, 0x2844004428ULL, 0x5088008850ULL, 0xA0100010A0ULL, 0x4020002040ULL, 
        0x20400040200ULL, 0x50800080500ULL, 0xA1100110A00ULL, 0x142200221400ULL, 0x284400442800ULL, 0x508800885000ULL, 0xA0100010A000ULL, 0x402000204000ULL, 
        0x2040004020000ULL, 0x5080008050000ULL, 0xA1100110A0000ULL, 0x14220022140000ULL, 0x28440044280000ULL, 0x50880088500000ULL, 0xA0100010A00000ULL, 0x40200020400000ULL, 
        0x204000402000000ULL, 0x508000805000000ULL, 0xA1100110A000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL, 0x5088008850000000ULL, 0xA0100010A0000000ULL, 0x4020002040000000ULL, 
        0x400040200000000ULL, 0x800080500000000ULL, 0x1100110A00000000ULL, 0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL, 0x100010A000000000ULL, 0x2000204000000000ULL, 
        0x4020000000000ULL, 0x8050000000000ULL, 0x110A0000000000ULL, 0x22140000000000ULL, 0x44280000000000ULL, 0x88500000000000ULL, 0x10A00000000000ULL, 0x20400000000000ULL};
        
        static constexpr Bitboard plt[2][64] =
        {{0x200ULL, 0x500ULL, 0xA00ULL, 0x1400ULL, 0x2800ULL, 0x5000ULL, 0xA000ULL, 0x4000ULL, 
        0x20000ULL, 0x50000ULL, 0xA0000ULL, 0x140000ULL, 0x280000ULL, 0x500000ULL, 0xA00000ULL, 0x400000ULL, 
        0x2000000ULL, 0x5000000ULL, 0xA000000ULL, 0x14000000ULL, 0x28000000ULL, 0x50000000ULL, 0xA0000000ULL, 0x40000000ULL, 
        0x200000000ULL, 0x500000000ULL, 0xA00000000ULL, 0x1400000000ULL, 0x2800000000ULL, 0x5000000000ULL, 0xA000000000ULL, 0x4000000000ULL, 
        0x20000000000ULL, 0x50000000000ULL, 0xA0000000000ULL, 0x140000000000ULL, 0x280000000000ULL, 0x500000000000ULL, 0xA00000000000ULL, 0x400000000000ULL, 
        0x2000000000000ULL, 0x5000000000000ULL, 0xA000000000000ULL, 0x14000000000000ULL, 0x28000000000000ULL, 0x50000000000000ULL, 0xA0000000000000ULL, 0x40000000000000ULL, 
        0x200000000000000ULL, 0x500000000000000ULL, 0xA00000000000000ULL, 0x1400000000000000ULL, 0x2800000000000000ULL, 0x5000000000000000ULL, 0xA000000000000000ULL, 0x4000000000000000ULL, 
        0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL}, {
        0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 0x0ULL, 
        0x2ULL, 0x5ULL, 0xAULL, 0x14ULL, 0x28ULL, 0x50ULL, 0xA0ULL, 0x40ULL, 
        0x200ULL, 0x500ULL, 0xA00ULL, 0x1400ULL, 0x2800ULL, 0x5000ULL, 0xA000ULL, 0x4000ULL, 
        0x20000ULL, 0x50000ULL, 0xA0000ULL, 0x140000ULL, 0x280000ULL, 0x500000ULL, 0xA00000ULL, 0x400000ULL, 
        0x2000000ULL, 0x5000000ULL, 0xA000000ULL, 0x14000000ULL, 0x28000000ULL, 0x50000000ULL, 0xA0000000ULL, 0x40000000ULL, 
        0x200000000ULL, 0x500000000ULL, 0xA00000000ULL, 0x1400000000ULL, 0x2800000000ULL, 0x5000000000ULL, 0xA000000000ULL, 0x4000000000ULL, 
        0x20000000000ULL, 0x50000000000ULL, 0xA0000000000ULL, 0x140000000000ULL, 0x280000000000ULL, 0x500000000000ULL, 0xA00000000000ULL, 0x400000000000ULL, 
        0x2000000000000ULL, 0x5000000000000ULL, 0xA000000000000ULL, 0x14000000000000ULL, 0x28000000000000ULL, 0x50000000000000ULL, 0xA0000000000000ULL, 0x40000000000000ULL}};

        //Horizontal Lookup Table
        static constexpr uint8_t hlt[8][64] =
        {{0xFE, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x3E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x7E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x3E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2, 
        0x1E, 0x2, 0x6, 0x2, 0xE, 0x2, 0x6, 0x2}, {
        0x0, 0xFD, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x3D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x7D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x3D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5, 
        0x0, 0x1D, 0x0, 0x5, 0x0, 0xD, 0x0, 0x5}, {
        0x0, 0x0, 0xFB, 0xFA, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x3B, 0x3A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x7B, 0x7A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x3B, 0x3A, 0x0, 0x0, 0xB, 0xA, 
        0x0, 0x0, 0x1B, 0x1A, 0x0, 0x0, 0xB, 0xA}, {
        0x0, 0x0, 0x0, 0x0, 0xF7, 0xF6, 0xF4, 0xF4, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14, 
        0x0, 0x0, 0x0, 0x0, 0x37, 0x36, 0x34, 0x34, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14, 
        0x0, 0x0, 0x0, 0x0, 0x77, 0x76, 0x74, 0x74, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14, 
        0x0, 0x0, 0x0, 0x0, 0x37, 0x36, 0x34, 0x34, 
        0x0, 0x0, 0x0, 0x0, 0x17, 0x16, 0x14, 0x14}, {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0xEF, 0xEE, 0xEC, 0xEC, 0xE8, 0xE8, 0xE8, 0xE8, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x6F, 0x6E, 0x6C, 0x6C, 0x68, 0x68, 0x68, 0x68, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x2F, 0x2E, 0x2C, 0x2C, 0x28, 0x28, 0x28, 0x28}, {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0xDF, 0xDE, 0xDC, 0xDC, 0xD8, 0xD8, 0xD8, 0xD8, 
        0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 0xD0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x5F, 0x5E, 0x5C, 0x5C, 0x58, 0x58, 0x58, 0x58, 
        0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50}, {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
        0xBF, 0xBE, 0xBC, 0xBC, 0xB8, 0xB8, 0xB8, 0xB8, 
        0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 
        0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 
        0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0}, {
        0x7F, 0x7E, 0x7C, 0x7C, 0x78, 0x78, 0x78, 0x78, 
        0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 
        0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
        0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 
        0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40}};

        //Rook Offset, Masks, and Boards
        static constexpr int RookOffset[64] = 
        {0x0, 0x1000, 0x1800, 0x2000, 
        0x2800, 0x3000, 0x3800, 0x4000, 
        0x5000, 0x5800, 0x5C00, 0x6000, 
        0x6400, 0x6800, 0x6C00, 0x7000, 
        0x7800, 0x8000, 0x8400, 0x8800, 
        0x8C00, 0x9000, 0x9400, 0x9800, 
        0xA000, 0xA800, 0xAC00, 0xB000, 
        0xB400, 0xB800, 0xBC00, 0xC000, 
        0xC800, 0xD000, 0xD400, 0xD800, 
        0xDC00, 0xE000, 0xE400, 0xE800, 
        0xF000, 0xF800, 0xFC00, 0x10000, 
        0x10400, 0x10800, 0x10C00, 0x11000, 
        0x11800, 0x12000, 0x12400, 0x12800, 
        0x12C00, 0x13000, 0x13400, 0x13800, 
        0x14000, 0x15000, 0x15800, 0x16000, 
        0x16800, 0x17000, 0x17800, 0x18000};
        static constexpr Bitboard RookMasks[64] = 
        {0x101010101017EULL, 0x202020202027CULL, 0x404040404047AULL, 0x8080808080876ULL, 
        0x1010101010106EULL, 0x2020202020205EULL, 0x4040404040403EULL, 0x8080808080807EULL, 
        0x1010101017E00ULL, 0x2020202027C00ULL, 0x4040404047A00ULL, 0x8080808087600ULL, 
        0x10101010106E00ULL, 0x20202020205E00ULL, 0x40404040403E00ULL, 0x80808080807E00ULL, 
        0x10101017E0100ULL, 0x20202027C0200ULL, 0x40404047A0400ULL, 0x8080808760800ULL, 
        0x101010106E1000ULL, 0x202020205E2000ULL, 0x404040403E4000ULL, 0x808080807E8000ULL, 
        0x101017E010100ULL, 0x202027C020200ULL, 0x404047A040400ULL, 0x8080876080800ULL, 
        0x1010106E101000ULL, 0x2020205E202000ULL, 0x4040403E404000ULL, 0x8080807E808000ULL, 
        0x1017E01010100ULL, 0x2027C02020200ULL, 0x4047A04040400ULL, 0x8087608080800ULL, 
        0x10106E10101000ULL, 0x20205E20202000ULL, 0x40403E40404000ULL, 0x80807E80808000ULL, 
        0x17E0101010100ULL, 0x27C0202020200ULL, 0x47A0404040400ULL, 0x8760808080800ULL, 
        0x106E1010101000ULL, 0x205E2020202000ULL, 0x403E4040404000ULL, 0x807E8080808000ULL, 
        0x7E010101010100ULL, 0x7C020202020200ULL, 0x7A040404040400ULL, 0x76080808080800ULL, 
        0x6E101010101000ULL, 0x5E202020202000ULL, 0x3E404040404000ULL, 0x7E808080808000ULL, 
        0x7E01010101010100ULL, 0x7C02020202020200ULL, 0x7A04040404040400ULL, 0x7608080808080800ULL, 
        0x6E10101010101000ULL, 0x5E20202020202000ULL, 0x3E40404040404000ULL, 0x7E80808080808000ULL};
        
        static Bitboard RookBoards[0x19000];

        static Bitboard hqRookAttack(int, Bitboard);
        static Bitboard rookAttack(int, Bitboard);

        //Bishop Offset, Masks, and Boards
        static constexpr int BishopOffset[64] = 
        {0x0, 0x40, 0x60, 0x80, 
        0xA0, 0xC0, 0xE0, 0x100, 
        0x140, 0x160, 0x180, 0x1A0, 
        0x1C0, 0x1E0, 0x200, 0x220, 
        0x240, 0x260, 0x280, 0x300, 
        0x380, 0x400, 0x480, 0x4A0, 
        0x4C0, 0x4E0, 0x500, 0x580, 
        0x780, 0x980, 0xA00, 0xA20, 
        0xA40, 0xA60, 0xA80, 0xB00, 
        0xD00, 0xF00, 0xF80, 0xFA0, 
        0xFC0, 0xFE0, 0x1000, 0x1080, 
        0x1100, 0x1180, 0x1200, 0x1220, 
        0x1240, 0x1260, 0x1280, 0x12A0, 
        0x12C0, 0x12E0, 0x1300, 0x1320, 
        0x1340, 0x1380, 0x13A0, 0x13C0, 
        0x13E0, 0x1400, 0x1420, 0x1440};
        static constexpr Bitboard BishopMasks[64] = 
        {0x40201008040200ULL, 0x402010080400ULL, 0x4020100A00ULL, 0x40221400ULL,
        0x2442800ULL, 0x204085000ULL, 0x20408102000ULL, 0x2040810204000ULL,
        0x20100804020000ULL, 0x40201008040000ULL, 0x4020100A0000ULL, 0x4022140000ULL,
        0x244280000ULL, 0x20408500000ULL, 0x2040810200000ULL, 0x4081020400000ULL,
        0x10080402000200ULL, 0x20100804000400ULL, 0x4020100A000A00ULL, 0x402214001400ULL,
        0x24428002800ULL, 0x2040850005000ULL, 0x4081020002000ULL, 0x8102040004000ULL,
        0x8040200020400ULL, 0x10080400040800ULL, 0x20100A000A1000ULL, 0x40221400142200ULL,
        0x2442800284400ULL, 0x4085000500800ULL, 0x8102000201000ULL, 0x10204000402000ULL, 
        0x4020002040800ULL, 0x8040004081000ULL, 0x100A000A102000ULL, 0x22140014224000ULL,
        0x44280028440200ULL, 0x8500050080400ULL, 0x10200020100800ULL, 0x20400040201000ULL,
        0x2000204081000ULL, 0x4000408102000ULL, 0xA000A10204000ULL, 0x14001422400000ULL,
        0x28002844020000ULL, 0x50005008040200ULL, 0x20002010080400ULL, 0x40004020100800ULL,
        0x20408102000ULL, 0x40810204000ULL, 0xA1020400000ULL, 0x142240000000ULL,
        0x284402000000ULL, 0x500804020000ULL, 0x201008040200ULL, 0x402010080400ULL,
        0x2040810204000ULL, 0x4081020400000ULL, 0xA102040000000ULL, 0x14224000000000ULL,
        0x28440200000000ULL, 0x50080402000000ULL, 0x20100804020000ULL, 0x40201008040200ULL};
        
        static Bitboard BishopBoards[0x1480];

        static Bitboard hqBishopAttack(int, Bitboard);
        static Bitboard bishopAttack(int, Bitboard);

        static void initSlideAttacks();

        Bitboard sides[2], pieces[6];
        bool toMove;

        uint8_t cf[2] = {7, 0};
        Bitboard cmk[2] = {0x70ULL, 0x1CULL};
        Bitboard coc[2] = {0x60ULL, 0xEULL};
        uint8_t crc[64] = 
            {8, 0, 0, 0, 12, 0, 0, 4,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0,
             2, 0, 0, 0, 3, 0, 0, 1};

        int thm, chm[256];
        uint8_t cr[256]; //last 4 bits q k Q K
        uint8_t ep[256];

        Hash zhist[256];

        //zobrist history and keys
        static constexpr Hash zpk[2][6][64] =
        {{{0xB6F85448AB693541ULL, 0x744DDD0663DFC21AULL, 0xB3B999265E1E0800ULL, 0x1B353145D07DB184ULL, 
        0x16DB7EB5E9C8B981ULL, 0x8099B594D21105E2ULL, 0x4782712900B270E2ULL, 0x7750A08018884EFEULL, 
        0x9E0CBDC6C226110DULL, 0xAD89E3AA44073EB5ULL, 0x167696B8FB22C2D0ULL, 0x553000133BF48A34ULL, 
        0x2C6F47CBD27B738AULL, 0x2D5DB6CA367C2C6BULL, 0x4D428734DD21FABFULL, 0xB5AA4E662A8FD5FFULL, 
        0xB8847FF1C8974B0ULL, 0x217840FA30620D42ULL, 0x821A7048F7FC4A79ULL, 0xD09ABFEF10BD2D3CULL, 
        0x818D4C223E95B20ULL, 0x2D1783D7CC37B849ULL, 0x80ADC5094C751071ULL, 0x6093D26983CB52E7ULL, 
        0xFF621D84AD140D8DULL, 0xF0219520D8563C4BULL, 0xCF5EF7398B8E67B6ULL, 0xD8CF5B83E62AD80DULL, 
        0x92803772E0382664ULL, 0x76EFB538555C2CFCULL, 0x6255D819708CD898ULL, 0x9B9266A35B6EAF5CULL, 
        0x7FD8C374371E4336ULL, 0x931C2E9E2C849CFULL, 0x9303ED6E9C106D3FULL, 0x8487FFDC2776EDBEULL, 
        0x7E6AAA09B2EDD048ULL, 0x412D189039D13BCAULL, 0x87426C4B7DAC8B5ULL, 0x94D1988055610648ULL, 
        0x92EEEC2488CAFF07ULL, 0x91BC6FF0ED924CF7ULL, 0x7FBD66B4E0E31CD8ULL, 0x1490DBE0AF0C1146ULL, 
        0x7B40C672EC74C8CDULL, 0xC67EB47932A24DDFULL, 0x86EFAA56DC87651AULL, 0x7EAE522FF6BA5725ULL, 
        0xA5B2E6EE8ED043AFULL, 0x730A6DA4159BBE77ULL, 0xB7FB8F7DDB780569ULL, 0x3B3B2578973D7CAAULL, 
        0xDE7152EC4F9A70F7ULL, 0xC02890F173D45CA2ULL, 0x40D8F96AD0098283ULL, 0x9600B4D52DBFE245ULL, 
        0xE318FCC6033A3516ULL, 0x322BE6CC24FFA995ULL, 0x7BD571F6B5769C50ULL, 0x23BFF709DF9F777ULL, 
        0x7628F9085C0FD189ULL, 0x4525A3D61851C73ULL, 0xDFBB3BDDF4DBBF4AULL, 0x6AD00F2CC2480A8AULL},

        {0x50C2A78FADB3EB5FULL, 0xCE57C8FA48DCAC1AULL, 0x23575EFA62C7913BULL, 0x4C584E07F6D5E8A1ULL, 
        0x1C6FCB95589973ULL, 0x8D4CDFDAB259A3C7ULL, 0xE7A904B0002D6E0FULL, 0x4494C394204C4B62ULL, 
        0xCEABA2DCC3BE952EULL, 0x3DDF4796D24E7600ULL, 0x98C27AAB2B7BBCF8ULL, 0x4CB35A1C46BCC6CDULL, 
        0x3318F5E5E24E086ULL, 0xD3866432C9ADB68ULL, 0xC3A00E05E3671211ULL, 0x2565852A7A26357FULL, 
        0xABAE84731C21D5F3ULL, 0x71869AE6B8757E2DULL, 0x90CAB16F688742D2ULL, 0xD2181E2CD1C73472ULL, 
        0x5B7D6533AAB33FE6ULL, 0x745FDC0E3B945174ULL, 0x9796D62C8B437B12ULL, 0x42F95EDAAD9D8775ULL, 
        0xE3A91E84225D6DC2ULL, 0x7338E45693CD03C9ULL, 0x3799BE163E594668ULL, 0x22640B9588257598ULL, 
        0x57929EAF7AD1DDA4ULL, 0x7DBDC00A08224252ULL, 0xD62ECA852E4978BAULL, 0xA5CB053719DE8E88ULL, 
        0x1C40269AB6BBC82DULL, 0xDECE8F577EA15B04ULL, 0xDDA523EC1518B01DULL, 0xCF9E02285F5B672AULL, 
        0x40103AB965107C7EULL, 0xE36DAB4915F18278ULL, 0x4E0D745211D3AE77ULL, 0x64EAE33FD617A272ULL, 
        0x83BE7AD2A21905C3ULL, 0xBAAD7F8A63823DB7ULL, 0x92B9BD47E6ACBDB6ULL, 0x27852FBCA95EF6EFULL, 
        0x7980B3F2DF8607F8ULL, 0xF88A1871A3EC2961ULL, 0x1CE1F093F38B05F1ULL, 0xB2D38B7E3E82E29CULL, 
        0x2441CDC5B88E13EEULL, 0x8DD6C1741C8CB809ULL, 0xEBF629EF5153AFB0ULL, 0x7701A4B881B4C5D6ULL, 
        0xD654279B59228B2ULL, 0xC36A018BFCE37471ULL, 0x5242139E4D6079EAULL, 0x3FFAC9FC35290A46ULL, 
        0xF39CFB421804A356ULL, 0xCB8905F63C4F8928ULL, 0xB3532CC7DB0DC1DDULL, 0x8A6136A1AFC25D10ULL, 
        0x439E8BDF57E0F1BAULL, 0x17E952BDFFA9718AULL, 0x1A2CEEDC814E4C47ULL, 0x7055213BABA96A7EULL},

        {0xB4FC27348D83B3D0ULL, 0xE8C0E0DE9F5F45A9ULL, 0x8D07B60335123891ULL, 0x4613C25CCCC2AE71ULL, 
        0xF99F36815E825CD9ULL, 0xCA7BC7B86386373EULL, 0x72A17F4BEEAE1745ULL, 0xE34170B2FC15431FULL, 
        0x3CE5ECF72842FB1DULL, 0xF2FB4FD5C8135BEULL, 0xD9FCC834873B5512ULL, 0x96E2B34FDB2C4F67ULL, 
        0x15A588267C60794FULL, 0x9C577353AD5CEC88ULL, 0x69092E3C4225ACD4ULL, 0x4F204530049ADFD5ULL, 
        0x50DB6DBF1B503574ULL, 0xBF19AE56C46A19F3ULL, 0xE4050763B079FAF5ULL, 0xED2ADF321D43F64DULL, 
        0xC995059CF5F86F74ULL, 0xD711BD50CED08B29ULL, 0x7FC604787B708A57ULL, 0x434086390C170A5BULL, 
        0x94D46735E66241C3ULL, 0x4826A878A9182C4FULL, 0x839A30871F9C7A2FULL, 0xC207D5630509C85CULL, 
        0xD9C526F8B10D7D30ULL, 0x86203B11B2242E03ULL, 0x8FED60E04D63ED85ULL, 0x970D5E2FAE46B2ABULL, 
        0x4A3B8E4EF9A3F77BULL, 0x842797445EF4F608ULL, 0x45259A36088E70CCULL, 0x5C968A8AE61C7FA5ULL, 
        0xECB2B0211AE9103ULL, 0xA23048A58049A6D0ULL, 0xC6E11FACF5BAA726ULL, 0x4F0BE610407DDF03ULL, 
        0xDFA45A95B25ED717ULL, 0xCBF37474812867D8ULL, 0x87C0CB8E5A0E229DULL, 0x86521EB82CB082CEULL, 
        0x85B88B184C9CBB50ULL, 0x71FBE205325193B2ULL, 0xF5DFC8019CD62401ULL, 0xAF4D7781988775CFULL, 
        0xAEB619F95B27E90BULL, 0x40F9BF276EBF6250ULL, 0xF436B14D01BB5D4FULL, 0x540D75387C75A16ULL, 
        0x33BD04B771223FD3ULL, 0xE6485F50EA8B6891ULL, 0x61D707BD6FDF82B0ULL, 0xE8F76FDBFAE3BA5DULL, 
        0x44300771B95D4721ULL, 0xDEBD3A5A33964497ULL, 0x36EA6656E00525B5ULL, 0x1103CC5883F958A7ULL, 
        0x9303385533ECC234ULL, 0x6284F70B391D9635ULL, 0x94F420FCC05BB068ULL, 0x93666924730D4934ULL},

        {0x46201AA416E32AB3ULL, 0xA2693986A3797E5BULL, 0x3F74C903783964E8ULL, 0xE5EC5980798C5CE0ULL, 
        0xF647D92D88FC9286ULL, 0x1D8DC1D13DAE604CULL, 0xDB256BF2C9B0C9AFULL, 0xD94C0AFE9023882EULL, 
        0x8FC7158600AF7817ULL, 0xDB7829BFDDB989EBULL, 0x6E8D755F2EF5DAA4ULL, 0xDBE3F14F3727095DULL, 
        0xB08351B658459B96ULL, 0xB37C8C883C205C3FULL, 0xF9CAF5AF5CB6B0C1ULL, 0xF25F74A2BE62BB5DULL, 
        0x1DFF58D74FED4933ULL, 0x48ABA817146B32A0ULL, 0xB3DCD242971C7FCULL, 0xC03AB87928335184ULL, 
        0xD25495072B06F763ULL, 0x74F1AC923561988ULL, 0x8C81AC1CD02E987FULL, 0x5C8A1A370C79AEF6ULL, 
        0xDFF014C773DA424DULL, 0xDF4B6C1481CF7342ULL, 0x4938D599E9833D21ULL, 0x21AF30954B0622A5ULL, 
        0x36AE20867295C4B5ULL, 0xA5E9F9C57D3812ACULL, 0xAB416291AEE8F81EULL, 0x9D46E4F79F2C889ULL, 
        0xC3A8FE4FE72DFBF5ULL, 0xC31CED8922FCAB3CULL, 0x7B374B35DA3CCC87ULL, 0x7BCA61DF20CB0B7DULL, 
        0x359FAEB47FF54CB0ULL, 0x2C6E65683B79F46ULL, 0x49D0603881EC026BULL, 0xD7FA63CFF0BAFDEAULL, 
        0xF678A08FBF9697BEULL, 0xDAF473F9B666E7FCULL, 0x53B4251C6701D076ULL, 0x1DC0371C4B88FF3DULL, 
        0xB8B6D01D589D9793ULL, 0xFA7E3ED641B0B623ULL, 0x391D7AC264A4EA53ULL, 0xE5D4A3D2C247B24DULL, 
        0xC7C0C67A77F2BE5FULL, 0x73D926A06E64DBE0ULL, 0x40B57F6EF4A27D19ULL, 0x9F72B7514AEC4181ULL, 
        0xBE6DA67DAAFF4809ULL, 0x6FFA42637D9362BULL, 0x5D0FCF56AA3BA7B3ULL, 0x1E18FAB8DDFBE364ULL, 
        0x2053AFD24891E5A2ULL, 0x509A19B9F92F2069ULL, 0x8F2C62E37A641C5FULL, 0x44360E7D85D845FFULL, 
        0x14383BB6CFD22E7BULL, 0xE239B692650BB7CAULL, 0xD1F205000F5E5B4FULL, 0x49029DB065B58480ULL},

        {0xB8206245E3E5E2D7ULL, 0xFD26F223A360CD9DULL, 0x30637A8866E23A80ULL, 0xB755CC3951335F07ULL, 
        0x2C722E3B3E18B4B3ULL, 0x1C5F0C5ED406A5DAULL, 0xE86A34E56F8DBEC2ULL, 0x6D64316EE9DBBFD5ULL, 
        0x20ADEB7653312EA7ULL, 0x17718839C380616AULL, 0x94E9D724858256E8ULL, 0xBF138B845C7B4B97ULL, 
        0x7713591A4A969031ULL, 0xBC713452F33CCFF9ULL, 0xBAFFF5AA9450ECC0ULL, 0x858D756DDCEE4A5BULL, 
        0xC91184A78C32110CULL, 0x4CB4C94BA0D00414ULL, 0xC0ADA6AA83502341ULL, 0xBBC521CC02E0C3ECULL, 
        0xF93E408E9974526EULL, 0xF2E36585F235051AULL, 0x880995FDA3EC2557ULL, 0x393B3B0637F09487ULL, 
        0xCDC73957BC00BD9EULL, 0xBD06F4FF230363AEULL, 0xC9CF602E837D6790ULL, 0x5669BFEFA5DA6EF6ULL, 
        0xC24CE877F28E589ULL, 0xCB7475F8DA868BE2ULL, 0x57DEBBFD4D09FD65ULL, 0x95B93B8F00929F5ULL, 
        0x9593419DC0CA0858ULL, 0xF18BC48905D50280ULL, 0x4DC402EC95CA7B14ULL, 0xC372420355895458ULL, 
        0x95A5CAC6F095BC56ULL, 0x1F30CA64D056CB7EULL, 0x8FA8E7312335E760ULL, 0x15CE5FA33178F863ULL, 
        0x16777799C3460CA8ULL, 0x79857678129E1D50ULL, 0x882EBBEB67A39A22ULL, 0x6BD0D50949222B9AULL, 
        0x444D9475F3855EB6ULL, 0x95BA0E2C3B2D331ULL, 0xFE5B187078718F06ULL, 0xF1E66A8A9FB8B27ULL, 
        0x992375F41CC1CBCAULL, 0x15ECFEF162C878DEULL, 0x2EBC04D19116D4B8ULL, 0x6448F3E2F3F8DA8BULL, 
        0x3E13983C6BF26B96ULL, 0x8CB33713EE63C734ULL, 0x57C2BE06B0A7FCA5ULL, 0x626E72CEC8AA2B75ULL, 
        0x2518F0CA2F98C40CULL, 0xB014AAECF9AAAF26ULL, 0x922CA13213209151ULL, 0x9DC80500A1272D2AULL, 
        0xA75B30F1BB0698B1ULL, 0x70D970AF9A4FA2E2ULL, 0x9C55CE48AD1D77E6ULL, 0x5B25FA0C28D39BAAULL},

        {0xAAE07781329C5CB8ULL, 0x5A501994880F23E0ULL, 0x20D5CE46761A5E0ULL, 0xAF3D42229AEE63E2ULL, 
        0xC04307C2C12D1362ULL, 0x172C117BD4147A23ULL, 0x924AB094AE6D0006ULL, 0x6D88DEA9F02184A3ULL, 
        0xBFF2EA5DDA4E2A29ULL, 0xAFCFF782F604F45DULL, 0xE4B82F6615E8F9B9ULL, 0x5BBDFDB40C67C2EDULL, 
        0x343849BF58104AEULL, 0xC85448C92F62637AULL, 0xD7145A85FDBBC1FDULL, 0x358D9427FB020ECDULL, 
        0x1FBB8107937F1878ULL, 0x204F823CC507CF11ULL, 0x33453A8A22D38D58ULL, 0x82D4ADFD81850DB8ULL, 
        0xC81E51355A5F58D1ULL, 0xA3163C9A4662249BULL, 0x724EBBCDD4C4CB69ULL, 0xD648E3EEF60BCFA9ULL, 
        0x2F68E38DD62776F8ULL, 0x5F0F2C15B3B6C035ULL, 0xC6E3CE5BA7E1B50BULL, 0x2D30939D9224642FULL, 
        0x4D4CBEA679547DA2ULL, 0xE99D0D6AD287BBDDULL, 0x9EE2EC7FCEE56C7DULL, 0xA8C2AF5FB14E1F71ULL, 
        0x89A567B4416B098CULL, 0x6DB2E486AD47177ULL, 0x9DAF481E5805D177ULL, 0xE3007DBF10230918ULL, 
        0x843CCD79E32833DCULL, 0x74D41EEC22DCC60CULL, 0x32D26055060C62C3ULL, 0xF284AD6846881777ULL, 
        0x3ECDF279310E34CULL, 0x7E82E1F94C3C1DC3ULL, 0x137884B34FB345C3ULL, 0x8ED4F0853EB8D46AULL, 
        0x4F38D387DDF1CD7ULL, 0x80A34A7CC7F15079ULL, 0xCB078166FE22B715ULL, 0x6E1DF39C159824C3ULL, 
        0x9495638B81265903ULL, 0xE2B96C7FC1FD77F0ULL, 0xB37E070FF7E9E43CULL, 0xAE2F8C78262A2BAAULL, 
        0x4DA398240C8A8FB9ULL, 0x2EE8066D06867CCCULL, 0xEFCDCE3567BF38AEULL, 0x5F7C99D865124FECULL, 
        0x45E6036DC7B22F0EULL, 0x81EAAAD28F07D7CDULL, 0x215B2DB2F428A1C3ULL, 0xA95710D56D2B2A6ULL, 
        0xE71ABBA2598D8251ULL, 0x4633BF52EF9423FDULL, 0x9B13922D36E60CA2ULL, 0xB65FEF899DCEA39DULL}}, 

        {{0x82B6E9FF78F37F39ULL, 0x67A2C0EC63039384ULL, 0x230B5471660CFB08ULL, 0x938A1AD837DC97EFULL, 
        0xC3D12924276A026BULL, 0x74CAD2F05C56D171ULL, 0x6C5AC312BB6542ACULL, 0x701B7A2ACE03BD75ULL, 
        0xEF095DB89DF365D0ULL, 0x4AC7B353DD907293ULL, 0x567AEF23FF9B9694ULL, 0x12EC85552607DC11ULL, 
        0x7BF421AC4F51DA32ULL, 0x28CD7BFE5CA3D2F0ULL, 0xC81FA3B02148A8CDULL, 0x114E786E6020520DULL, 
        0xB168799E0F0D2FF4ULL, 0xE177C377B5B9B460ULL, 0x85E499CE3227780ULL, 0xE5FD3AF790EB66E2ULL, 
        0xF5A87219217A11E2ULL, 0x1F77DD3855DDF6B4ULL, 0x143852C073BA2B09ULL, 0x34423C6D8BCB9FULL, 
        0x36E1E9FD3FA5AB23ULL, 0x929100C429820E01ULL, 0x78D9186C2C91A374ULL, 0xDE0CA2F3220E1F8ULL, 
        0x17B2C80448253352ULL, 0x913C8A76D453FEDDULL, 0x471298B6C3AE9891ULL, 0xC77281D8422A2FFDULL, 
        0x71CEAB3C28D80504ULL, 0xEBECB75568C4CFD1ULL, 0x4C8153C064C78960ULL, 0x4B35E3CAAFB21E07ULL, 
        0xED26E2261F2F6DE8ULL, 0x2B1E07D6B71B0C2AULL, 0x879C2DE3D9C1DE04ULL, 0x7AB0DDD4FCAA9E4CULL, 
        0x8D35EC9FFAE9E9CAULL, 0x10F5EE8B1E7DF1D7ULL, 0xBCB9819FB56A04BCULL, 0xFFF9C3C5015F6763ULL, 
        0x468587F3FD81671ULL, 0x2FAA033425D8CECCULL, 0xF0B348C6F44E0699ULL, 0x30BFBCF656CA80D1ULL, 
        0x34FDF4531CC03767ULL, 0xD742CC2FC9BFDEDULL, 0x4D38E7D2C49C719CULL, 0x7E3208C2F364E9B0ULL, 
        0x42D63AD8B7B67FEDULL, 0x59769965AFFF2C74ULL, 0x73F1502013516432ULL, 0x3EEF590A5CC8377BULL, 
        0x8B042170131090B6ULL, 0x3E6F69FE125FAFFFULL, 0x80FABC60FC3A09FCULL, 0x59698C208C9A549EULL, 
        0xEA48726AA19B3B62ULL, 0x1C5D4E2B9D24DD55ULL, 0x2F10EC0F96422B03ULL, 0x7A844DC7CCF48942ULL},

        {0x8A813C719923F87ULL, 0xAB2392C1E2B1048CULL, 0xAC9A5BCC6A9F70E0ULL, 0xC8134F6D432D496CULL, 
        0xB095E21311679F60ULL, 0x416D789E86E45721ULL, 0x5DAE990F21AD4144ULL, 0x64521175774F908AULL, 
        0x28DDEB2F6F27FDF6ULL, 0x85BBFCC6E0232E9CULL, 0xCEF41DF9677CC3DBULL, 0xE6DA703DF5FB0376ULL, 
        0x38C34A10A0049F33ULL, 0x1E7D97BE758053BEULL, 0x1380499BFDD5E307ULL, 0xE0C291E1F1AB126CULL, 
        0x3C78BA7835E75349ULL, 0x7C8634EE4D384774ULL, 0x18A2E6123B1CF69DULL, 0x45DEAD4B5D777219ULL, 
        0xB6DA828D35D4DA1DULL, 0xC1A6EB3AA1226CAFULL, 0x694B1A3ED4232E2FULL, 0x70BDFEF0F7677B8FULL, 
        0xBED96764F550277DULL, 0x874A0EE524C72CA8ULL, 0x1ACCEA6FA542EB15ULL, 0xDE2340CCDCDBD84DULL, 
        0x62E0ED85530DF187ULL, 0x377826E804E8D7ADULL, 0x30819A12FD793A57ULL, 0x30A9CCCEAA23067EULL, 
        0xCBDD95296600FEBCULL, 0x7D5EFE1DDBD1D04BULL, 0x4F0579703D3A76EULL, 0xACF4E529E7A1E1CULL, 
        0x3749371D112F8611ULL, 0x42CE97C2C6FC0572ULL, 0x206AF98910651694ULL, 0xE764D2E1AC0669A1ULL, 
        0x5385C3BE1B4291ABULL, 0x78C861FA48E1E1B9ULL, 0x5932AA1D25B4F4ADULL, 0x50DC5EBB11D26386ULL, 
        0x148404DE961F4B37ULL, 0xAD5043D713EDB9A8ULL, 0xD6DBE6BEB0A948B9ULL, 0x62D34F138404FE79ULL, 
        0x5AC09CA5656807C1ULL, 0xB741AFF2D15AF73DULL, 0xF4940276955DE935ULL, 0x519AD7149B9D46D2ULL, 
        0x3E321893BD5CC6F0ULL, 0xD0F044F8B4926711ULL, 0xF500C52DA606863AULL, 0x662A019EFBB619EFULL, 
        0x48A6B82BD95F7F2AULL, 0x6155109417AF0F8AULL, 0xF2AF715F9F28CF19ULL, 0x23B7F08E3E5361C1ULL, 
        0x1E5AD3EAC42602ABULL, 0x4C5CB61E402180B6ULL, 0x8F5F30968644B799ULL, 0x607829E0283C5EE9ULL},

        {0x7308E65EAEA7E2E7ULL, 0x77A70FCBAE5EF29BULL, 0xE312255C477380CCULL, 0xE6BD707D949252F2ULL, 
        0x30648F6BB861B260ULL, 0x9A422BE636BDE8B9ULL, 0x7E21768A380BEED4ULL, 0x41F4006FD5421BDEULL, 
        0x8DEC6F64BF2AB4E4ULL, 0x59E63229C83A6435ULL, 0x5B443253E50BACB8ULL, 0x9A57F4036C5556FEULL, 
        0xE85AC24CEF64A00CULL, 0x6ECFCDAD143139ABULL, 0xBD76505DCDBC8675ULL, 0xE569CFEA405F2E19ULL, 
        0x449EE878461C6D16ULL, 0x2401427C38634297ULL, 0x3E53443C10890A7FULL, 0xC06F7EE89A11EF4ULL, 
        0xDD7387C4E2B6C1E3ULL, 0x8A831A810515962CULL, 0xF6953D4AC916E4A1ULL, 0xC9A4E187919212BULL, 
        0x1EEB795C14C065AEULL, 0xCD32DE6D59E22DCDULL, 0x376FC827C4091B46ULL, 0xD2F805A1580713B5ULL, 
        0xDC2396173B226F9FULL, 0x6DAC842722CBA210ULL, 0x101FB623C92BE124ULL, 0x3897D7B29BDEEB0FULL, 
        0xBFFAB9EF7CD19EDBULL, 0x4530B759AA5B083ULL, 0x5A1BE7C8B7761837ULL, 0x16FE33B799E71874ULL, 
        0xE531D4E0A2699FA8ULL, 0x3FE8853CB8251225ULL, 0x3AFF6BAEA12B32F2ULL, 0x75A23F3387CBA6FBULL, 
        0x889115443D526CCBULL, 0xB75E84731F93B324ULL, 0x9FD540D1B5C6879AULL, 0xE80A2B6CF6FF746FULL, 
        0x149DC80913B3F81BULL, 0x223F99FEF561BF09ULL, 0xAB57C8E2E32F66E3ULL, 0x4B7794C7BA6330E6ULL, 
        0xD03E870062D12553ULL, 0xD3E7D435E7556D22ULL, 0xFFA6117FF5B4C55BULL, 0x225063B6352CFCEAULL, 
        0xA343E26FC0EA62FEULL, 0xE70D2B14EC062B6DULL, 0x12E397E53F6199D9ULL, 0x74FC708DF0542622ULL, 
        0x69702B1F6AC52D2AULL, 0x786CB932562A50E1ULL, 0xD16B5C0A8B91EE66ULL, 0xF66DC34669AADA1AULL, 
        0xBD1B04D6783CBDA7ULL, 0x344CB758B6102346ULL, 0x876FF4D12FCCB31AULL, 0xB69FDF6BA43BF261ULL},

        {0x36B49A7AEDD4A5E5ULL, 0xA6ECA49D80B927F7ULL, 0x93EB146849B37204ULL, 0xD19380D3C640F268ULL, 
        0x46BC93685E7586AEULL, 0x79E6CE50AB398D27ULL, 0x8C21332F26298EC5ULL, 0xDC554D43154A4F02ULL, 
        0x9B678BB14D2F3F13ULL, 0x75C44500065E1B04ULL, 0x27B8A264AF6E2635ULL, 0x3441779E1A5CFA76ULL, 
        0xEFA55646415048B1ULL, 0x463E614196563D4DULL, 0xED49C80C381C38F8ULL, 0xED7C14C01EFAEFDCULL, 
        0x7EB7E903D20589D8ULL, 0xDC6D89DFE59D3D58ULL, 0xA1B68DE43D453183ULL, 0xF31F34F8D62A2F51ULL, 
        0x6BF57453DFAF9C67ULL, 0x1B6ACC1AD3597B9BULL, 0x8BC613E29DF59A7CULL, 0xFCF139227EE79E9BULL, 
        0x7934773C9BFE96CULL, 0x8322EABD92AFD097ULL, 0xA5B2E24AD4F52766ULL, 0xADEFAB59B19965CAULL, 
        0x6E2CA83467922895ULL, 0x80BBA77BF1B7A011ULL, 0x3D2471F952811616ULL, 0x25959EF7C4FE5FE1ULL, 
        0xA2B9FC07A80FA754ULL, 0x8079C975CD36621DULL, 0x2E4A976A8EE059B7ULL, 0xB14CB34320CDE721ULL, 
        0x792C3A56673C927BULL, 0x9FFA876DA34FD4A2ULL, 0xC4448BD8D6EE5D2DULL, 0x97720B5BBEF88BE8ULL, 
        0x136E5691B151C172ULL, 0xA0D5A5BC495024AFULL, 0xD63F3E3046BE9663ULL, 0xC829408568C30A78ULL, 
        0x105FFF05DF80FCE5ULL, 0x7165EF70F370399CULL, 0x9BC3CA7F7B324BA1ULL, 0x9D616B591A1DF80ULL, 
        0x74FE821AF28E3FB2ULL, 0x38FAC61F86A01B96ULL, 0xF4A12DF2094F80ABULL, 0xF19654F69EB6E218ULL, 
        0xBDBBB951937A618AULL, 0xA9360D6A4A376A8FULL, 0x2586E9FB792C2100ULL, 0x6F0592AD0F607819ULL, 
        0x421F2A397ECD49E6ULL, 0xAB13AF4BF9729192ULL, 0x6A77CF562C55098AULL, 0x96C4B66991A9BD2FULL, 
        0x254B9B7B6ABB7E32ULL, 0xFD974FB4B2B53990ULL, 0x41AB4D05328E2852ULL, 0xE0FB46814DFBFBF2ULL},

        {0x96A7278F9FEE9B24ULL, 0x1E35E21455EF987CULL, 0x3629199CA4D1A468ULL, 0x922A52D4F5C87BCULL, 
        0x3440099B68BD25B4ULL, 0xF2A5495E4B5B3875ULL, 0x1A91097ACB0185C0ULL, 0x93F22AD5AC8F0F61ULL, 
        0x3EABB372B3EED974ULL, 0x66C340970DE06755ULL, 0x8B784DA4A1E85FC2ULL, 0x255DF6D8F4F04974ULL, 
        0x252893048ED34720ULL, 0x135B1B31CFD01B62ULL, 0xC45E53EC0D312AD6ULL, 0xA6A6C944714E4139ULL, 
        0xD35E2122A02F6E5ULL, 0xF49C0B0DE03ABD0DULL, 0x4817F98B04733CD6ULL, 0x6977A28FBF0C3F1EULL, 
        0x353711D42D38EC3ULL, 0x11ECF75AA1EB9F50ULL, 0xE572FAFDC9B02A60ULL, 0x2DFA1E6EA775EF7ULL, 
        0x8C488EC8ED1B9BE4ULL, 0xDF206AAD9DD03AC9ULL, 0x6982205BFE7E39FFULL, 0x305617A594411716ULL, 
        0x49E301F861D6BAE3ULL, 0x461EDCEC67267753ULL, 0xB5D6917206406388ULL, 0x1784489EA98CCC04ULL, 
        0x3776E8209CB3DFD1ULL, 0xAAFF804BCAE0722ULL, 0x4C3500153F6503D1ULL, 0xAEE8B560AE2490DFULL, 
        0x8DB3B0BDED9456BBULL, 0x495E7EA5946AAEA2ULL, 0x46FDD0F4B0B909D8ULL, 0x730048E33F146D1EULL, 
        0x4E44064A67EC2621ULL, 0xCCBFF7975F60CA38ULL, 0xEDD6B2D50E4879AEULL, 0x3DB8D44D18002CCFULL, 
        0x42F2EC4DBD59F3C8ULL, 0x2336296A33A14FC7ULL, 0x3E3558D0C8ECF3DAULL, 0x74829FE26CF7F525ULL, 
        0x45F84DD8EE6A6DAULL, 0x4863282CBFFBBE1AULL, 0x3667CDEA7DD32C41ULL, 0x4E24F28432063649ULL, 
        0xBCCA57539DFD136AULL, 0x699296F13328AD0FULL, 0xE471627853DD7C17ULL, 0xA09A7508B6CA4C54ULL, 
        0x9265A6CF940781D1ULL, 0x375AE7F1BA07C508ULL, 0x5FF9278EBFB0D90EULL, 0x948FA9B7BF4AF915ULL, 
        0x683D1390EDAFB321ULL, 0xC8097B96D24C2687ULL, 0xC84DF94CA49F24E7ULL, 0x8255184612FB7EA6ULL},

        {0x4F372E40030364FAULL, 0x316D8808DED39A5DULL, 0xD7509772049EFD2ULL, 0x23A7E9816C719B6AULL, 
        0x1FBF614B5CDD2168ULL, 0xFF7CEE68D7234E3CULL, 0xDB5300CFF42B1779ULL, 0x9DDA43188A6EC9A7ULL, 
        0x811C6F0BD64505D1ULL, 0xB7821E1487A4F4D8ULL, 0xE95383F2AA861139ULL, 0xED0ADF69A1850CC5ULL, 
        0x4EE286973D184F05ULL, 0x4063A169A1009C9DULL, 0xAA2E8C8166962D98ULL, 0xAB1213787BFACBA0ULL, 
        0xD26E40B01EBD3A4ULL, 0xF27101DFC909AECBULL, 0xB4DF32CA3685B862ULL, 0xD4437973B9467F71ULL, 
        0x4973BADB16E1A0D6ULL, 0xF6283915C748CB70ULL, 0x2053CD7FE3A4387DULL, 0xA7C492CDAE0D3630ULL, 
        0xD23C0EFF7DC144A5ULL, 0x4EBF84A67403ED90ULL, 0x8F48B0C271FDA457ULL, 0x59B10F959BEE997AULL, 
        0x447AEEEF730DE8EAULL, 0x23F6E33088CFAB54ULL, 0x8C3760A7A3F9D429ULL, 0x89553A6F877C735DULL, 
        0x40E66E13174F23F2ULL, 0x7DCD13E5106DD758ULL, 0xCB44C3C5FE5F03E6ULL, 0x754FAA58AB0922FAULL, 
        0xF75AE58595BEAC55ULL, 0x4CFDDA3F17C094C5ULL, 0x2F469615B3A78D40ULL, 0xF403ACD6F887F955ULL, 
        0x131A7FB0B61B643CULL, 0xB30755DE36B4FB73ULL, 0xC7C43E6DB032876CULL, 0x26601F0E67931093ULL, 
        0xCE100AA2174BB9F1ULL, 0x50634BB2AC1EDB09ULL, 0x39E174C6B3B43D62ULL, 0x196313651C94D09AULL, 
        0xDB3487A3DB9AB80BULL, 0xFB6AE28D2AB40440ULL, 0x59C4C96EF929AD1CULL, 0x21A993421932CB34ULL, 
        0x4D663791FFA68685ULL, 0x225B1740175B9707ULL, 0xCC2EDFAAFE2B5031ULL, 0x577C096C0AA11600ULL, 
        0x865B5EC8554B76B9ULL, 0x199961DF34D3370BULL, 0x4DD381852FD2E614ULL, 0x923FA79473E6C8D9ULL, 
        0x86DAB956A637B1BBULL, 0x2E1346427F47E215ULL, 0xD9FD4BEE48A781B4ULL, 0xFF170EB602C78E28ULL}}};

        static constexpr Hash zck[16] = 
        {0x182F28ED9A262D77ULL, 0x8B72D36B0BEE2E8DULL, 0x29ADB16F19542FDEULL, 0x9427357A4AEF9F31ULL, 
        0x2C2DE9B7320603F7ULL, 0x8D9BE360F2C67E12ULL, 0x38AFC66B941F6994ULL, 0xC9BB66081BD72E91ULL, 
        0x871E74C1AE44BCC7ULL, 0x4347A8CE818EC486ULL, 0x8FE3A872F874CFCDULL, 0xD6F3E36104AA6979ULL, 
        0x9A4A5C7527DD4D0CULL, 0xA48B0BCE3BCB8D87ULL, 0xDEC0E2B2AE8E3EABULL, 0x341FC8F52DD9FF87ULL};

        static constexpr Hash zek[8] = 
        {0x2E43DE74D5AF0CC9ULL, 0xE863440AD20272D5ULL, 0xCCE473E9C4F0A0E6ULL, 0x3F38CC5DDCBA1657ULL, 
        0xB10CA5484308D3D7ULL, 0xAD6D4401068F0636ULL, 0xEEBD24A47D3BE56AULL, 0xB718DCD8B616EA91ULL};

        static constexpr Hash ztk = 0xCDCD104370A59F55ULL;

        //FEN-related parsing
        static constexpr char frchr[21] = 
        {'/', '1', '2', '3', '4', '5', '6', '7', '8',
            'k', 'q', 'r', 'b', 'n', 'p', 'K', 'Q', 'R', 'B', 'N', 'P'};

        //static constexpr char cstrt[4] = 
        //{'K', 'Q', 'k', 'q'};

        std::string cstrt[16] = 
        {"-", "K", "Q", "KQ",
        "k", "Kk", "Qk", "KQk",
        "q", "Kq", "Qq", "KQq",
        "kq", "Kkq", "Qkq", "KQkq"};

        Bitboards();

        static void printAsBitboard(Bitboard);

        int pieceAt(int);

        bool insufficient();
        bool onlyPawns(bool);

        void setStartPos();
        void empty();

        void print();

        void beginZobrist();
        void showZobrist();
        int countReps(int);

        void readFen(std::string);
        std::string makeFen();

        bool who(){ return toMove; }
        int halfMoves(){ return chm[thm]; }
};

/*
Function Definitions for Bitboards Class

TheTilted096, 12-19-24
Wilted Engine
*/

Bitboard Bitboards::RookBoards[0x19000];
Bitboard Bitboards::BishopBoards[0x1480];

Bitboards::Bitboards(){
    empty();
}

Bitboard Bitboards::hqRookAttack(int sq, Bitboard occ){
    Bitboard forward = occ & (0x0101010101010101ULL << (sq & 7));
    Bitboard reverse = __builtin_bswap64(forward);

    forward -= 2 * (1ULL << sq);
    reverse -= 2 * (1ULL << (56 ^ sq));

    forward ^= __builtin_bswap64(reverse);
    forward &= (0x0101010101010101ULL << (sq & 7)); //forward is now vertical attacks

    //printAsBitboard(forward, std::cout);

    Bitboard horizontal = ((uint64_t)hlt[sq & 7]
        [((((0xFFULL << ((sq & 56))) & occ) >> (sq & 56)) >> 1) & 63]) << (sq & 56);

    //printAsBitboard(horizontal, std::cout);
    //printAsBitboard(forward | horizontal, std::cout);

    return (forward | horizontal);
}

Bitboard Bitboards::rookAttack(int sq, Bitboard occ){
    return RookBoards[RookOffset[sq] + _pext_u64(occ, RookMasks[sq])];
}

Bitboard Bitboards::hqBishopAttack(int sq, Bitboard occ){
    //Position::printAsBitboard(occ);
    Bitboard ldiag = 0x8040201008040201ULL;
    Bitboard rdiag = 0x102040810204080ULL;

    Bitboard sqfile = 0x101010101010101ULL << (sq & 7);
    
    Bitboard forward, reverse;
    //right diagonal
    int d = __builtin_ctzll(sqfile & rdiag) - sq;
    //std::cout << d << '\n';
    Bitboard mask = (d >= 0) ? (rdiag >> d) : (rdiag << -d);
    forward = occ & mask;
    reverse = __builtin_bswap64(forward);
    forward -= 2 * (1ULL << sq);
    reverse -= 2 * (1ULL << (56 ^ sq));
    forward ^= __builtin_bswap64(reverse);
    forward &= mask;

    Bitboard result = forward; //save right diagonal attacks

    d = __builtin_ctzll(sqfile & ldiag) - sq;
    //std::cout << d << '\n';
    mask = (d >= 0) ? (ldiag >> d) : (ldiag << -d);
    forward = occ & mask;
    reverse = __builtin_bswap64(forward);
    forward -= 2 * (1ULL << sq);
    reverse -= 2 * (1ULL << (56 ^ sq));
    forward ^= __builtin_bswap64(reverse);
    forward &= mask;

    result |= forward;

    //Position::printAsBitboard(result);

    return result;
}

Bitboard Bitboards::bishopAttack(int sq, Bitboard occ){
    return BishopBoards[BishopOffset[sq] + _pext_u64(occ, BishopMasks[sq])];
}

void Bitboards::initSlideAttacks(){
    int pos = 0;
    Bitboard cons;

    const uint8_t RookBits[64] = 
        {12, 11, 11, 11, 11, 11, 11, 12,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        12, 11, 11, 11, 11, 11, 11, 12};

    //std::ofstream rt("rawTables.txt");

    for (int sq = 0; sq < 64; sq++){
        for (int idx = 0; idx < (1 << RookBits[sq]); idx++){
            cons = _pdep_u64(idx, RookMasks[sq]) | (1ULL << sq);
            RookBoards[pos] = hqRookAttack(sq, cons);
            //printAsBitboard(RookBoards[pos], rt);
            pos++;
        }
    }

    const uint8_t BishopBits[64] = 
        {6, 5, 5, 5, 5, 5, 5, 6, 
        5, 5, 5, 5, 5, 5, 5, 5, 
        5, 5, 7, 7, 7, 7, 5, 5, 
        5, 5, 7, 9, 9, 7, 5, 5, 
        5, 5, 7, 9, 9, 7, 5, 5, 
        5, 5, 7, 7, 7, 7, 5, 5, 
        5, 5, 5, 5, 5, 5, 5, 5, 
        6, 5, 5, 5, 5, 5, 5, 6};

    pos = 0;

    for (int sq = 0; sq < 64; sq++){
        for (int idx = 0; idx < (1 << BishopBits[sq]); idx++){
            cons = _pdep_u64(idx, BishopMasks[sq]) | (1ULL << sq);
            BishopBoards[pos] = hqBishopAttack(sq, cons);

            pos++;
        }
    }
}

void Bitboards::printAsBitboard(Bitboard board){
    for (int i = 0; i < 64; i++) {
        std::cout << (board & 1ULL);
        if ((i & 7) == 7) {
            std::cout << '\n';
        }
        board >>= 1;
    }
    std::cout << '\n';
}

int Bitboards::pieceAt(int sq){
    Bitboard sqbb = (1ULL << sq);
    for (int i = 0; i < 6; i++){
        if (pieces[i] & sqbb){
            return i;
        }
    }
    return 5 + (1U << 13);
}

bool Bitboards::insufficient(){
    if (pieces[1] | pieces[2] | pieces[5]){
        return false;
    }

    return (__builtin_popcountll(pieces[3] | pieces[4]) < 2);
}

bool Bitboards::onlyPawns(bool s){
    return !(sides[s] ^ (sides[s] & (pieces[0] | pieces[5])));
}

void Bitboards::setStartPos(){
    sides[0] = 0xFFFFULL;
    sides[1] = 0xFFFF000000000000ULL;

    pieces[0] = 0x1000000000000010ULL;
    pieces[1] = 0x800000000000008ULL;
    pieces[2] = 0x8100000000000081ULL;
    pieces[3] = 0x2400000000000024ULL;
    pieces[4] = 0x4200000000000042ULL;
    pieces[5] = 0xFF00000000FF00ULL;

    toMove = true;
    thm = 0;
    ep[0] = 255; //out of range en passant because there is none
    cr[0] = 15;    
}

void Bitboards::empty(){
    sides[0] = 0ULL; sides[1] = 0ULL;
    pieces[0] = 0ULL; pieces[1] = 0ULL; pieces[2] = 0ULL;
    pieces[3] = 0ULL; pieces[4] = 0ULL; pieces[5] = 0ULL;

    toMove = true;
    thm = 0;
    ep[0] = 255; //out of range en passant because there is none
    cr[0] = 0;    
}

void Bitboards::print(){
    std::cout << "sides[0] (black)\tsides[1] (white)\n";
    for (int i = 0; i < 8; i++){
        for (int j = 0; j < 8; j++){
            std::cout << ((sides[0] >> ((i << 3) + j)) & 1ULL);
        }
        std::cout << "\t\t";
        for (int j = 0; j < 8; j++){
            std::cout << ((sides[1] >> ((i << 3) + j)) & 1ULL);
        }
        std::cout << '\n';
    }

    std::cout << "\n\npieces[0]\tpieces[1]\tpieces[2]\tpieces[3]\tpieces[4]\tpieces[5]\n";
    for (int i = 0; i < 8; i++){
        for (int k = 0; k < 6; k++){
            for (int j = 0; j < 8; j++){
                std::cout << ((pieces[k] >> ((i << 3) + j)) & 1ULL);
            }
            std::cout << '\t';
        }
        std::cout << '\n';
    }
    std::cout << '\n';
    std::cout << "toMove: " << toMove << "\n\n";

    std::cout << "Clock: " << thm << '\n';
    std::cout << "Half Move: " << chm[thm] << '\n';

    std::cout << "Castling: " << (int) cr[thm] << '\n';
    std::cout << "En Passant: " << (int) ep[thm] << "\n\n";
}

void Bitboards::readFen(std::string fen){
    //EXAMPLE: rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1 moves aa
    empty();

    std::stringstream segs(fen);

    std::string feed;

    segs >> feed; //main information segment
    
    uint8_t ind, sq = 0;
    for (char cc : feed){
        for (ind = 0; ind < 21; ind++){ //use std::find?
            if (frchr[ind] == cc){
                break;
            }
        }

        if (ind < 9){
            sq += ind;
            continue;
        }
        if (ind < 15){
            pieces[ind - 9] |= (1ULL << sq);
            sides[0] |= (1ULL << sq);
            sq++;
            continue;
        }

        pieces[ind - 15] |= (1ULL << sq);
        sides[1] |= (1ULL << sq);
        sq++;
    }

    segs >> feed; //side to move
    toMove = feed[0] & 1; //'w' = 119 and 'b' = 98;
    
    segs >> feed; //castling rights 'KQkq' or something
    for (ind = 0; ; ind++){
        if (cstrt[ind] == feed){
            break;
        }
    }
    
    cr[0] = ind;

    //input total 1/2 move clock starting at 0th
    thm = 0;

    //might want to optimize this later
    /*
    cr[0] |= (cstrt[0] == feed[ind]);
    ind += (cstrt[0] == feed[ind]);

    cr[0] |= ((cstrt[1] == feed[ind]) << 1);
    ind += (cstrt[1] == feed[ind]);

    cr[0] |= ((cstrt[2] == feed[ind]) << 2);
    ind += (cstrt[2] == feed[ind]);

    cr[0] |= ((cstrt[3] == feed[ind]) << 3);
    ind += (cstrt[3] == feed[ind]);
    */

    /*
    for (int i = 0; i < 4; i++){
        bool can = cstrt[i] == feed[ind];
        cr[0] |= (can << i);
        ind += can;
    }
    */


    segs >> feed; //en passant square
    ep[0] = (feed != "-") ? ((feed[0] - 97) + 8 * (56 - feed[1])) : 255;

    //implement half move clock
    segs >> feed;
    chm[0] = std::stoi(feed); 
}

std::string Bitboards::makeFen(){
	uint64_t occ = sides[0] | sides[1];
	std::string result = "";

	uint64_t squarebb;

	int emptyCount;

	for (int i = 0; i < 8; i++){ //for each of 8 rows
		emptyCount = 0;
		for (int j = 0; j < 8; j++){ //for each square in each row
			squarebb = 1ULL << (8 * i + j);

			if (squarebb & occ){ //if landed on occupied space
				if (emptyCount != 0){ //unload stored empty squares
					result += emptyCount + 48;
					emptyCount = 0;
				}

                for (int k = 0; k < 6; k++){
                    if (squarebb & pieces[k] & sides[1]){
                        result += frchr[k + 15];
                    }
                    if (squarebb & pieces[k] & sides[0]){
                        result += frchr[k + 9];
                    }
                }

				emptyCount = 0; //no longer empty
			} else { //otherwise, count as empty square
				emptyCount++;
			}
		}
		if (emptyCount != 0){
			result += emptyCount + 48;
		}
		if (i != 7){
			result += '/';
		}
	}

	result += ' ';
	result += (toMove ? 'w' : 'b');
    result += ' ';
	result += cstrt[cr[thm]];
    result += ' ';
    if (ep[thm] == 255){
        result += '-';
    } else {
        result += ((ep[thm] & 7) + 97);
        result += (8 - (ep[thm] >> 3)) + 48;
    }
    result += ' ';
	result += std::to_string(chm[thm]);
	result += " 1";

	return result;
}

void Bitboards::beginZobrist(){
    Bitboard pcs;
    int f;

    zhist[thm] = !toMove * ztk;

    for (int i = 0; i < 6; i++){
        pcs = sides[1] & pieces[i];
        while (pcs){
            f = __builtin_ctzll(pcs);
            zhist[thm] ^= zpk[1][i][f];
            pcs ^= (1ULL << f);
        }

        pcs = sides[0] & pieces[i];
        while (pcs){
            f = __builtin_ctzll(pcs);
            zhist[thm] ^= zpk[0][i][f];
            pcs ^= (1ULL << f);
        }
    }

    if (ep[thm] != 255){
        zhist[thm] ^= zek[ep[thm] & 7];
    }

    zhist[thm] ^= zck[cr[thm]];
}

void Bitboards::showZobrist(){
    std::cout << "Zobrist History:\n";
    for (int i = 0; i < thm + 1; i++){
        std::cout << "ZH " << i << ": " << zhist[i] << '\n';
    }
}

int Bitboards::countReps(int ply){
    int reps = 1; //start with this repetition
    int rind = thm; //index starts at right now

    while ((rind > 1) and chm[rind]){ //while at the beginning and last 50mr reset,
        rind -= 2; //go back 2
        //assert(rind >= 0);
        reps += ((zhist[thm] == zhist[rind]) * (1 + (rind >= thm - ply)));
        //add a rep if the position matches, add another if it occurs after search start
    }

    return reps;
}








